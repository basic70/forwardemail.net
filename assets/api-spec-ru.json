{
  "openapi": "3.0.0",
  "info": {
    "title": "Forward Email API",
    "description": "<img src=\"/img/articles/email-api.webp\" alt=\"\"/><br />Добро пожаловать в подробную документацию по API для пересылки электронной почты. Этот API позволяет программно управлять пересылкой электронной почты, доменами, псевдонимами, исходящими письмами и другими функциями.\n\n## Основные функции\n* **Управление доменами:** Создание, извлечение, обновление, удаление и верификация доменов.\n* **Управление псевдонимами:** Управление псевдонимами электронной почты, включая создание, обновление и управление получателями.\n* **Исходящий SMTP:** Отправка писем по SMTP, управление ограничениями и отслеживание отправленных писем.\n* **Учетная запись и журналы:** Управление данными вашей учетной записи и загрузка журналов активности.\n* **Безопасность:** Шифрование TXT-записей и управление участниками/приглашениями домена.\n* **Контакты CardDAV:** Полный набор CRUD-операций для управления контактами с поддержкой vCard.\n* **Календари CalDAV:** Полное управление календарями с поддержкой часовых поясов и цветов.\n* **Сообщения IMAP/POP3:** Комплексное управление сообщениями с расширенными возможностями поиска.\n* **Папки IMAP/POP3:** Полное управление папками, включая создание, переименование и удаление.\n\n## Аутентификация\nДля большинства конечных точек требуется аутентификация с использованием вашего **ключа API**. Укажите ключ API в качестве `username` в заголовке базовой аутентификации, оставив пароль пустым.\n\n```http\nАвторизация: Базовая QVBJX1RPS0VOOg==\n```\n(Замените `API_TOKEN` на ваш фактический ключ перед кодированием в Base64)\n\nДля конечных точек, связанных с **псевдонимами контактов, календарей, сообщений и папок**, требуется сгенерированный псевдоним имени пользователя и пароля для базовой аутентификации.\n\n## Ошибки\nAPI использует стандартные коды статуса HTTP для обозначения успеха или неудачи. Ответы об ошибках включают тело JSON с полем `message`, описывающим ошибку.\n\n| Код статуса | Значение |\n|------------|---------------------|\n| 200 | OK |\n| 400 | Неверный запрос |\n| 401 | Неавторизован |\n| 403 | Запрещено |\n| 404 | Не найдено |\n| 409 | Конфликт |\n| 412 | Предварительное условие не выполнено |\n| 429 | Слишком много запросов |\n| 500 | Внутренняя ошибка сервера |\n| 501 | Не реализовано |\n| 502 | Неверный шлюз |\n| 503 | Служба недоступна |\n| 504 | Истекло время ожидания шлюза |\n\n*Если вы столкнулись с ошибкой `5xx`, свяжитесь с [api@forwardemail.net](mailto:api@forwardemail.net).*\n\n## Локализация\nОтветы API переводятся на основе обнаруженных локалей пользователя или заголовка `Accept-Language`. Поддерживается более 25 языков.\n\n## Пагинация\nКонечные точки, возвращающие списки, поддерживают пагинацию через параметры запроса.\n\n| Параметр | Тип | Необязательный | Описание | По умолчанию | Ограничения |\n|-------------|---------|-----------|----------------------------------------------------------------------------|---------|--------------------|\n| `page` | Целое число | Да | Номер страницы для извлечения. | 1 | `>= 1` |\n| `limit` | Целое число | Да | Количество результатов на странице. | 10 | `>= 1`, `<= 50` |\n| `pagination` | Boolean | Да | Включение пагинации (требуется до 1 ноября 2024 г. для некоторых конечных точек). | false | |\n\n**Заголовки пагинации:**\n* `X-Page-Count`: Общее количество страниц.\n* `X-Page-Current`: Номер текущей страницы.\n* `X-Page-Size`: Количество элементов на текущей странице.\n* `X-Item-Count`: Общее количество элементов на всех страницах.\n* `Link`: Навигационные ссылки (предыдущая, следующая, первая, последняя).\n\n**Пример:**\n```bash\ncurl \"https://api.forwardemail.net/v1/domains?page=2&limit=20&pagination=true\" \\\n-u API_TOKEN:\n```\n\n## Рекомендуемые библиотеки\n* **Ruby:** [Faraday](https://github.com/lostisland/faraday)\n* **Python:** [requests](https://requests.readthedocs.io/en/latest/)\n* **Java:** [OkHttp](https://square.github.io/okhttp/)\n* **PHP:** [Guzzle](https://docs.guzzlephp.org/en/stable/)\n* **JavaScript/Node.js:** [superagent](https://github.com/visionmedia/superagent) (Поддерживается пересылкой электронной почты)\n* **Go:** `net/http`\n* **.NET:** [RestSharp](https://restsharp.dev/)",
    "version": "1.0.0",
    "contact": {
      "name": "Forward Email Support",
      "url": "https://forwardemail.net",
      "email": "api@forwardemail.net"
    }
  },
  "servers": [
    {
      "url": "https://api.forwardemail.net",
      "description": "API-сервер пересылки электронной почты"
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "\nИспользуйте свой ключ API в качестве **имени пользователя** для базовой аутентификации. Оставьте поле пароля пустым.\n\n**Пример:**\nЕсли ваш ключ API — `YOUR_API_KEY`, то значение в кодировке Base64 для заголовка `Authorization` будет выглядеть так: `echo -n \"YOUR_API_KEY:\" | base64`.\n\n```http\nАвторизация: Базовая WU9VUl9BUElfS0VZOg==\n```\n"
      },
      "AliasAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "\nИспользуйте сгенерированные **имя пользователя и пароль псевдонима** для базовой аутентификации. Это применимо к конечным точкам в разделах:\n* Псевдоним контактов (CardDAV)\n* Псевдоним календарей (CalDAV)\n* Псевдоним сообщений (IMAP/POP3)\n* Псевдоним папок (IMAP/POP3)\n\n**Пример:**\nЕсли имя пользователя псевдонима — `alias@domain.com`, а пароль — `GENERATED_PASSWORD`, значение в кодировке Base64 будет выглядеть так: `echo -n \"alias@domain.com:GENERATED_PASSWORD\" | base64`.\n\n```http\nАвторизация: Базовая YWxpYXNAZG9tYWluLmNvbTpHRU5FUkFURURfUEFTU1dPUkQ=\n```\n"
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "required": [
          "message"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "Сообщение об ошибке"
          }
        }
      },
      "Account": {
        "type": "object",
        "required": [
          "id",
          "email",
          "plan",
          "object"
        ],
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_newsletter": {
            "type": "boolean"
          },
          "plan": {
            "type": "string",
            "example": "free"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "max_quota_per_alias": {
            "type": "integer",
            "format": "int64"
          },
          "full_email": {
            "type": "string",
            "format": "email"
          },
          "display_name": {
            "type": "string"
          },
          "otp_enabled": {
            "type": "boolean"
          },
          "last_locale": {
            "type": "string"
          },
          "address_country": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "example": "user"
          },
          "locale": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "address_html": {
            "type": "string"
          },
          "api_token": {
            "type": "string",
            "format": "uuid"
          }
        },
        "example": {
          "sessions": [],
          "has_newsletter": true,
          "plan": "free",
          "email": "test1@test1.com",
          "max_quota_per_alias": 10737418240,
          "full_email": "test1@test1.com",
          "display_name": "test1@test1.com",
          "otp_enabled": false,
          "last_locale": "en",
          "address_country": "None",
          "id": "683fb2e81cc5d449a0d4cd9d",
          "object": "user",
          "locale": "en",
          "created_at": "2025-06-04T02:43:52.646Z",
          "updated_at": "2025-06-04T02:43:55.350Z",
          "address_html": "",
          "api_token": "15ac16ae21784aa2cb4d5508"
        }
      },
      "Contact": {
        "type": "object",
        "required": [
          "id",
          "uid",
          "full_name",
          "content",
          "etag",
          "is_group",
          "emails",
          "phone_numbers",
          "created_at",
          "updated_at",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Идентификатор контакта (contact_id из CardDAV)"
          },
          "uid": {
            "type": "string",
            "description": "Контактный UID"
          },
          "full_name": {
            "type": "string",
            "description": "Полное имя контакта"
          },
          "content": {
            "type": "string",
            "description": "содержимое vCard"
          },
          "etag": {
            "type": "string",
            "description": "ETag для управления версиями"
          },
          "is_group": {
            "type": "boolean",
            "description": "Является ли контакт группой"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "format": "email"
                },
                "type": {
                  "type": "string",
                  "default": "INTERNET"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив адресов электронной почты"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "default": "CELL"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив телефонных номеров"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "enum": [
              "contact"
            ]
          }
        },
        "example": {
          "id": "contact123",
          "uid": "uid123",
          "full_name": "John Doe",
          "content": "BEGIN:VCARD\\nVERSION:3.0\\nUID:uid123\\nFN:John Doe\\nEMAIL;TYPE=INTERNET:john@example.com\\nEND:VCARD",
          "etag": "etag123",
          "is_group": false,
          "emails": [
            {
              "value": "john@example.com",
              "type": "INTERNET"
            }
          ],
          "phone_numbers": [
            {
              "value": "+1234567890",
              "type": "CELL"
            }
          ],
          "created_at": "2025-01-01T00:00:00.000Z",
          "updated_at": "2025-01-01T00:00:00.000Z",
          "object": "contact"
        }
      },
      "ContactInput": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Содержимое vCard (если не указано, будет сгенерировано из других полей)"
          },
          "full_name": {
            "type": "string",
            "description": "Полное имя контакта"
          },
          "contact_id": {
            "type": "string",
            "description": "Пользовательский идентификатор контакта (если не указан, будет сгенерирован автоматически)"
          },
          "uid": {
            "type": "string",
            "description": "Контактный UID (если не указан, будет сгенерирован автоматически)"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "format": "email"
                },
                "type": {
                  "type": "string",
                  "default": "INTERNET"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив адресов электронной почты"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "default": "CELL"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив телефонных номеров"
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "default": "CELL"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив телефонных номеров (псевдоним для phone_numbers)"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "postalCode": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            },
            "description": "Массив адресов"
          },
          "is_group": {
            "type": "boolean",
            "description": "Является ли контакт группой"
          }
        }
      },
      "ContactUpdateInput": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "содержимое vCard"
          },
          "full_name": {
            "type": "string",
            "description": "Полное имя контакта"
          },
          "emails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "format": "email"
                },
                "type": {
                  "type": "string",
                  "default": "INTERNET"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив адресов электронной почты"
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "default": "CELL"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив телефонных номеров"
          },
          "phones": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "default": "CELL"
                }
              },
              "required": [
                "value"
              ]
            },
            "description": "Массив телефонных номеров (псевдоним для phone_numbers)"
          },
          "addresses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string"
                },
                "city": {
                  "type": "string"
                },
                "state": {
                  "type": "string"
                },
                "postalCode": {
                  "type": "string"
                },
                "country": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                }
              }
            },
            "description": "Массив адресов"
          },
          "is_group": {
            "type": "boolean",
            "description": "Является ли контакт группой"
          }
        }
      },
      "Calendar": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "color",
          "timezone",
          "order",
          "created_at",
          "updated_at",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Идентификатор календаря (calendarId из CalDAV)"
          },
          "name": {
            "type": "string",
            "description": "Название календаря"
          },
          "description": {
            "type": "string",
            "description": "Описание календаря"
          },
          "color": {
            "type": "string",
            "description": "Цвет календаря (шестнадцатеричный формат)"
          },
          "timezone": {
            "type": "string",
            "description": "Календарь часового пояса"
          },
          "order": {
            "type": "integer",
            "description": "Порядок отображения календаря"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "enum": [
              "calendar"
            ]
          }
        },
        "example": {
          "id": "calendar123",
          "name": "Personal Calendar",
          "description": "My personal calendar",
          "color": "#ff0000",
          "timezone": "America/New_York",
          "order": 0,
          "created_at": "2025-01-01T00:00:00.000Z",
          "updated_at": "2025-01-01T00:00:00.000Z",
          "object": "calendar"
        }
      },
      "CalendarInput": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Название календаря"
          },
          "calendar_id": {
            "type": "string",
            "description": "Пользовательский идентификатор календаря (если не указан, будет сгенерирован автоматически)"
          },
          "description": {
            "type": "string",
            "description": "Описание календаря"
          },
          "color": {
            "type": "string",
            "description": "Цвет календаря (шестнадцатеричный формат, если не указан, будет сгенерирован автоматически)"
          },
          "timezone": {
            "type": "string",
            "description": "Часовой пояс календаря (по умолчанию — часовой пояс пользователя или UTC)"
          },
          "order": {
            "type": "integer",
            "description": "Порядок отображения календаря (по умолчанию 0)"
          }
        }
      },
      "CalendarUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Название календаря"
          },
          "description": {
            "type": "string",
            "description": "Описание календаря"
          },
          "color": {
            "type": "string",
            "description": "Цвет календаря (шестнадцатеричный формат)"
          },
          "timezone": {
            "type": "string",
            "description": "Календарь часового пояса"
          },
          "order": {
            "type": "integer",
            "description": "Порядок отображения календаря"
          }
        }
      },
      "Folder": {
        "type": "object",
        "required": [
          "id",
          "path",
          "name",
          "parent",
          "uid_validity",
          "uid_next",
          "modify_index",
          "subscribed",
          "flags",
          "retention",
          "special_use",
          "created_at",
          "updated_at",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Идентификатор папки"
          },
          "path": {
            "type": "string",
            "description": "Полный путь к папке"
          },
          "name": {
            "type": "string",
            "description": "Имя папки (последняя часть пути)"
          },
          "parent": {
            "type": "string",
            "nullable": true,
            "description": "Путь к родительской папке"
          },
          "uid_validity": {
            "type": "integer",
            "description": "Действительность UID IMAP"
          },
          "uid_next": {
            "type": "integer",
            "description": "Следующее значение UID"
          },
          "modify_index": {
            "type": "integer",
            "description": "Индекс модификации"
          },
          "subscribed": {
            "type": "boolean",
            "description": "Подписана ли папка"
          },
          "flags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Флаги папок"
          },
          "retention": {
            "type": "integer",
            "nullable": true,
            "description": "Срок хранения сообщений"
          },
          "special_use": {
            "type": "string",
            "nullable": true,
            "description": "Специальное назначение"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "object": {
            "type": "string",
            "enum": [
              "folder"
            ]
          }
        },
        "example": {
          "id": "folder123",
          "path": "INBOX/Subfolder",
          "name": "Subfolder",
          "parent": "INBOX",
          "uid_validity": 123456,
          "uid_next": 1,
          "modify_index": 1,
          "subscribed": true,
          "flags": [],
          "retention": null,
          "special_use": null,
          "created_at": "2025-01-01T00:00:00.000Z",
          "updated_at": "2025-01-01T00:00:00.000Z",
          "object": "folder"
        }
      },
      "FolderInput": {
        "type": "object",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Путь/имя папки"
          }
        }
      },
      "FolderUpdateInput": {
        "type": "object",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "Новый путь/имя папки"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "id",
          "root_id",
          "folder_id",
          "folder_path",
          "thread_id",
          "header_message_id",
          "is_unread",
          "is_flagged",
          "is_deleted",
          "is_draft",
          "is_junk",
          "is_copied",
          "is_searchable",
          "is_expired",
          "has_attachment",
          "retention_date",
          "internal_date",
          "header_date",
          "subject",
          "flags",
          "size",
          "uid",
          "modseq",
          "transaction",
          "remote_address",
          "object"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Идентификатор сообщения"
          },
          "root_id": {
            "type": "string",
            "description": "Идентификатор корневого сообщения для потоковой передачи"
          },
          "folder_id": {
            "type": "string",
            "description": "Идентификатор папки, содержащей сообщение"
          },
          "folder_path": {
            "type": "string",
            "description": "Путь к папке, содержащей сообщение"
          },
          "thread_id": {
            "type": "string",
            "description": "Идентификатор потока для группировки бесед"
          },
          "header_message_id": {
            "type": "string",
            "description": "Значение заголовка Message-ID"
          },
          "is_unread": {
            "type": "boolean",
            "description": "Непрочитано ли сообщение"
          },
          "is_flagged": {
            "type": "boolean",
            "description": "Помечено ли сообщение"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Удалено ли сообщение"
          },
          "is_draft": {
            "type": "boolean",
            "description": "Является ли сообщение черновиком"
          },
          "is_junk": {
            "type": "boolean",
            "description": "Является ли сообщение спамом"
          },
          "is_copied": {
            "type": "boolean",
            "description": "Копируется ли сообщение"
          },
          "is_searchable": {
            "type": "boolean",
            "description": "Можно ли выполнить поиск по сообщению?"
          },
          "is_expired": {
            "type": "boolean",
            "description": "Срок действия сообщения истек"
          },
          "has_attachment": {
            "type": "boolean",
            "description": "Есть ли вложения в сообщении"
          },
          "retention_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Дата хранения сообщения"
          },
          "internal_date": {
            "type": "string",
            "format": "date-time",
            "description": "Внутренняя дата (IMAP)"
          },
          "header_date": {
            "type": "string",
            "format": "date-time",
            "description": "Дата из заголовков сообщения"
          },
          "subject": {
            "type": "string",
            "description": "Тема сообщения"
          },
          "flags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Флаги IMAP"
          },
          "size": {
            "type": "integer",
            "description": "Размер сообщения в байтах"
          },
          "uid": {
            "type": "integer",
            "description": "IMAP-UID"
          },
          "modseq": {
            "type": "integer",
            "description": "Последовательность модификации"
          },
          "transaction": {
            "type": "string",
            "description": "Тип транзакции"
          },
          "remote_address": {
            "type": "string",
            "description": "Удаленный IP-адрес"
          },
          "nodemailer": {
            "type": "object",
            "description": "Проанализированный объект сообщения (включен по умолчанию, установите ?nodemailer=false для исключения)"
          },
          "raw": {
            "type": "string",
            "description": "Необработанное содержимое сообщения (включено по умолчанию, установите ?raw=false, чтобы исключить)"
          },
          "object": {
            "type": "string",
            "enum": [
              "message"
            ]
          }
        },
        "example": {
          "id": "message123",
          "root_id": "root123",
          "folder_id": "folder123",
          "folder_path": "INBOX",
          "thread_id": "thread123",
          "header_message_id": "<message123@example.com>",
          "is_unread": true,
          "is_flagged": false,
          "is_deleted": false,
          "is_draft": false,
          "is_junk": false,
          "is_copied": false,
          "is_searchable": true,
          "is_expired": false,
          "has_attachment": false,
          "retention_date": null,
          "internal_date": "2025-01-01T00:00:00.000Z",
          "header_date": "2025-01-01T00:00:00.000Z",
          "subject": "Test Message",
          "flags": [
            "\\Seen"
          ],
          "size": 1024,
          "uid": 1,
          "modseq": 1,
          "transaction": "API",
          "remote_address": "127.0.0.1",
          "object": "message"
        }
      },
      "MessageInput": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "email",
            "description": "Адрес электронной почты отправителя"
          },
          "to": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            ],
            "description": "Адреса электронной почты получателей"
          },
          "cc": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            ],
            "description": "Адреса электронной почты получателей копий"
          },
          "bcc": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            ],
            "description": "Адреса электронной почты получателей скрытых копий"
          },
          "subject": {
            "type": "string",
            "description": "Тема сообщения"
          },
          "text": {
            "type": "string",
            "description": "Простой текстовый контент"
          },
          "html": {
            "type": "string",
            "description": "HTML-контент"
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Вложения сообщений (формат Nodemailer)"
          },
          "folder": {
            "type": "string",
            "description": "Целевая папка (по умолчанию INBOX)"
          },
          "flags": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Флаги IMAP для установки в сообщении"
          }
        }
      },
      "MessageUpdateInput": {
        "type": "object",
        "properties": {
          "flags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Флаги IMAP для установки в сообщении"
          },
          "folder": {
            "type": "string",
            "description": "Переместить сообщение в эту папку"
          }
        }
      },
      "Email": {
        "type": "object",
        "required": [
          "id",
          "object",
          "status",
          "alias",
          "domain",
          "user"
        ],
        "properties": {
          "is_redacted": {
            "type": "boolean"
          },
          "hard_bounces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "soft_bounces": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_bounce": {
            "type": "boolean"
          },
          "alias": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "example": "sent"
          },
          "is_locked": {
            "type": "boolean"
          },
          "envelope": {
            "type": "object",
            "properties": {
              "from": {
                "type": "string",
                "format": "email"
              },
              "to": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            }
          },
          "messageId": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "type": "string"
          },
          "accepted": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "example": "email"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "link": {
            "type": "string",
            "format": "uri"
          }
        },
        "example": {
          "is_redacted": true,
          "hard_bounces": [],
          "soft_bounces": [],
          "is_bounce": false,
          "alias": "67a180fxxxxxxxe46a3f0edf",
          "domain": "5efae85dxxxxxxxf4bb53c7a",
          "user": "5efabd3907xxxxxxx12890b8",
          "status": "sent",
          "is_locked": false,
          "envelope": {
            "from": "test@test.com",
            "to": [
              "test@test1.com"
            ]
          },
          "messageId": "1a04fee3-5230-4a85-9111-a2c376835885@shaunwarman.com",
          "date": "2025-06-04T03:32:19.000Z",
          "subject": "testing",
          "accepted": [
            "test@test1.com"
          ],
          "id": "683fbe4d5baef1b583a1xxxx",
          "object": "email",
          "created_at": "2025-06-04T03:32:29.138Z",
          "updated_at": "2025-06-04T03:32:33.847Z",
          "link": "https://forwardemail.net/my-account/emails/683fbe4d5baef1b583a11e54"
        }
      },
      "EmailList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Email"
        }
      },
      "SMTP": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "email",
            "description": "Адрес электронной почты отправителя (должен существовать как псевдоним домена)."
          },
          "to": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            ],
            "description": "Список получателей, разделенных запятыми, или массив получателей для заголовка «Кому»."
          },
          "cc": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            ],
            "description": "Список получателей, разделенных запятыми, или массив получателей для заголовка «Копия»."
          },
          "bcc": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              }
            ],
            "description": "Список получателей, разделенных запятыми, или массив для заголовка «Скрытая копия»."
          },
          "subject": {
            "type": "string",
            "description": "Тема письма."
          },
          "text": {
            "type": "string",
            "description": "Текстовая версия сообщения."
          },
          "html": {
            "type": "string",
            "description": "HTML-версия сообщения."
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Массив объектов вложений (см. общие поля Nodemailer)."
          },
          "sender": {
            "type": "string",
            "format": "email",
            "description": "Адрес электронной почты для заголовка «Отправитель»."
          },
          "replyTo": {
            "type": "string",
            "format": "email",
            "description": "Адрес электронной почты для заголовка «Ответить»."
          },
          "inReplyTo": {
            "type": "string",
            "description": "Идентификатор сообщения, на которое отправлено сообщение."
          },
          "references": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ],
            "description": "Список, разделенный пробелами, или массив идентификаторов сообщений."
          },
          "attachDataUrls": {
            "type": "boolean",
            "description": "Если значение равно true, преобразует данные: изображения в HTML-содержимом во встроенные вложения."
          },
          "watchHtml": {
            "type": "string",
            "description": "HTML-версия сообщения для Apple Watch."
          },
          "amp": {
            "type": "string",
            "description": "Специфическая HTML-версия сообщения AMP4EMAIL."
          },
          "icalEvent": {
            "type": "object",
            "description": "Событие iCalendar как альтернативный контент сообщения."
          },
          "alternatives": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Массив альтернативного содержания сообщений."
          },
          "encoding": {
            "type": "string",
            "description": "Кодировка текста и HTML-строк (например, «utf-8», «hex», «base64»)."
          },
          "raw": {
            "type": "string",
            "description": "Пользовательское сообщение в формате RFC822 (вместо использования генерации Nodemailer)."
          },
          "textEncoding": {
            "type": "string",
            "enum": [
              "quoted-printable",
              "base64"
            ],
            "description": "Для текстовых значений принудительно применяется кодировка."
          },
          "priority": {
            "type": "string",
            "enum": [
              "high",
              "normal",
              "low"
            ],
            "description": "Уровень приоритета электронного письма."
          },
          "headers": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            ],
            "description": "Объект или массив дополнительных полей заголовка."
          },
          "messageId": {
            "type": "string",
            "description": "Дополнительный Message-ID для заголовка «Message-ID»."
          },
          "date": {
            "oneOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "string"
              }
            ],
            "description": "Необязательный заголовок «Дата». Не может быть позже 30 дней."
          },
          "list": {
            "type": "object",
            "description": "Необязательный объект заголовков List-*."
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "has_newsletter": {
            "type": "boolean"
          },
          "ignore_mx_check": {
            "type": "boolean"
          },
          "retention_days": {
            "type": "integer"
          },
          "has_regex": {
            "type": "boolean"
          },
          "has_catchall": {
            "type": "boolean"
          },
          "allowlist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "denylist": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "restricted_alias_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_adult_content_protection": {
            "type": "boolean"
          },
          "has_phishing_protection": {
            "type": "boolean"
          },
          "has_executable_protection": {
            "type": "boolean"
          },
          "has_virus_protection": {
            "type": "boolean"
          },
          "is_catchall_regex_disabled": {
            "type": "boolean"
          },
          "has_smtp": {
            "type": "boolean"
          },
          "is_smtp_suspended": {
            "type": "boolean"
          },
          "plan": {
            "type": "string"
          },
          "max_recipients_per_alias": {
            "type": "integer"
          },
          "smtp_port": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "has_mx_record": {
            "type": "boolean"
          },
          "has_txt_record": {
            "type": "boolean"
          },
          "has_dkim_record": {
            "type": "boolean"
          },
          "has_return_path_record": {
            "type": "boolean"
          },
          "has_dmarc_record": {
            "type": "boolean"
          },
          "has_recipient_verification": {
            "type": "boolean"
          },
          "has_custom_verification": {
            "type": "boolean"
          },
          "verification_record": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "domain"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "storage_used": {
            "type": "integer"
          },
          "storage_used_by_aliases": {
            "type": "integer"
          },
          "storage_quota": {
            "type": "integer"
          },
          "smtp_dns_records": {
            "type": "object",
            "properties": {
              "dkim": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              },
              "return_path": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              },
              "dmarc": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "value": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "link": {
            "type": "string",
            "format": "uri"
          }
        },
        "example": [
          {
            "has_newsletter": false,
            "ignore_mx_check": false,
            "retention_days": 0,
            "has_regex": false,
            "has_catchall": true,
            "allowlist": [],
            "denylist": [],
            "restricted_alias_names": [],
            "has_adult_content_protection": true,
            "has_phishing_protection": true,
            "has_executable_protection": true,
            "has_virus_protection": true,
            "is_catchall_regex_disabled": false,
            "has_smtp": false,
            "is_smtp_suspended": false,
            "plan": "team",
            "max_recipients_per_alias": 10,
            "smtp_port": "25",
            "name": "test.com",
            "has_mx_record": false,
            "has_txt_record": false,
            "has_dkim_record": false,
            "has_return_path_record": false,
            "has_dmarc_record": false,
            "has_recipient_verification": false,
            "has_custom_verification": false,
            "verification_record": "kcjg6vrO8Q",
            "id": "683f1172c4bad2524410b857",
            "object": "domain",
            "created_at": "2025-06-03T15:14:59.000Z",
            "updated_at": "2025-06-03T15:14:59.254Z",
            "storage_used": 0,
            "storage_used_by_aliases": 0,
            "storage_quota": 10737418240,
            "smtp_dns_records": {
              "dkim": {
                "name": "fe-ebf3212716._domainkey",
                "value": "v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcG+YBDPhyH8bLmyflmU9w1klYDeWpEufIlVqyWqly9lC+J/ntkKn4gum28EeE6vR+55x4JFCR8qSaw0YO1eCRwBgpFB0kKzbELHh2i2TKKwrqB3gPLXp4q4lbcGX2eD6fPCRwckTHqmiOzMhX8GD60zVlEvabok4LJ1i/BOyh6wIDAQAB;"
              },
              "return_path": {
                "name": "fe-bounces",
                "value": "forwardemail.net"
              },
              "dmarc": {
                "name": "_dmarc",
                "value": "v=DMARC1; p=reject; pct=100; rua=mailto:dmarc-683f1172c4bad2524410b857@localhost;"
              }
            },
            "link": "http://localhost:3000/my-account/domains/test.com"
          }
        ]
      },
      "CreateDomainInput": {
        "type": "object",
        "required": [
          "domain"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "Полное доменное имя (FQDN) или IP-адрес"
          },
          "team_domain": {
            "type": "string",
            "nullable": true,
            "description": "Назначить той же команде из другого домена; можно указать идентификатор домена или полное доменное имя. Для явного отключения используйте значение «none»."
          },
          "plan": {
            "type": "string",
            "enum": [
              "free",
              "enhanced_protection",
              "team"
            ],
            "description": "Тип плана (по умолчанию «бесплатный» или текущий платный план пользователя)"
          },
          "catchall": {
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "string",
                "description": "Список адресов электронной почты с разделителями (запятыми, пробелами или символами новой строки)"
              }
            ],
            "description": "Создать универсальный псевдоним по умолчанию (значение по умолчанию — true)"
          },
          "has_adult_content_protection": {
            "type": "boolean",
            "description": "Включить защиту от контента для взрослых с помощью спам-сканера"
          },
          "has_phishing_protection": {
            "type": "boolean",
            "description": "Включить защиту от фишинга Spam Scanner"
          },
          "has_executable_protection": {
            "type": "boolean",
            "description": "Включить защиту исполняемого файла Spam Scanner"
          },
          "has_virus_protection": {
            "type": "boolean",
            "description": "Включить защиту от вирусов Spam Scanner"
          },
          "has_recipient_verification": {
            "type": "boolean",
            "description": "Требовать от получателей псевдонимов нажатия ссылки для подтверждения адреса электронной почты"
          },
          "ignore_mx_check": {
            "type": "boolean",
            "description": "Игнорировать проверку записи MX для расширенных настроек маршрутизации почты"
          },
          "retention_days": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Количество дней для хранения исходящих журналов SMTP (0–30, по умолчанию: 0)"
          },
          "bounce_webhook": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri",
                "description": "URL-адрес веб-перехватчика для получения событий отказа"
              },
              {
                "type": "boolean",
                "enum": [
                  false
                ],
                "description": "Отключить веб-перехватчик отказов"
              }
            ]
          },
          "max_quota_per_alias": {
            "type": "string",
            "description": "Максимальная квота хранения для псевдонима (например, «1 ГБ»)"
          }
        }
      },
      "UpdateDomainInput": {
        "type": "object",
        "properties": {
          "smtp_port": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Пользовательский порт для настройки пересылки SMTP (по умолчанию «25»)"
          },
          "has_adult_content_protection": {
            "type": "boolean",
            "description": "Включать ли защиту от контента для взрослых с помощью Spam Scanner на этом домене?"
          },
          "has_phishing_protection": {
            "type": "boolean",
            "description": "Включать ли защиту от фишинга Spam Scanner на этом домене?"
          },
          "has_executable_protection": {
            "type": "boolean",
            "description": "Включать ли защиту исполняемого файла Spam Scanner на этом домене?"
          },
          "has_virus_protection": {
            "type": "boolean",
            "description": "Включать ли антивирусную защиту Spam Scanner на этом домене?"
          },
          "has_recipient_verification": {
            "type": "boolean",
            "description": "Глобальное значение домена по умолчанию, определяющее, требуется ли, чтобы получатели псевдонимов нажимали ссылку для подтверждения адреса электронной почты, чтобы электронные письма проходили через него."
          },
          "ignore_mx_check": {
            "type": "boolean",
            "description": "Игнорировать ли проверку MX-записи в домене для подтверждения (в основном для расширенных настроек маршрутизации MX)"
          },
          "retention_days": {
            "type": "integer",
            "minimum": 0,
            "maximum": 30,
            "description": "Количество дней хранения исходящих писем SMTP (0 = немедленно очистить)"
          },
          "bounce_webhook": {
            "oneOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "boolean",
                "enum": [
                  false
                ]
              }
            ],
            "description": "URL-адрес веб-перехватчика для получения уведомлений о недоставке или значение false для отключения"
          },
          "max_quota_per_alias": {
            "type": "string",
            "description": "Квота хранения для каждого псевдонима (например, «1 ГБ», в байтах)"
          }
        }
      },
      "Alias": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "format": "email"
              },
              "display_name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            },
            "required": [
              "email",
              "display_name",
              "id"
            ]
          },
          "domain": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "id"
            ]
          },
          "name": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_enabled": {
            "type": "boolean"
          },
          "has_recipient_verification": {
            "type": "boolean"
          },
          "verified_recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "pending_recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "recipients": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "email"
            }
          },
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "alias"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "storage_location": {
            "type": "string"
          },
          "has_imap": {
            "type": "boolean"
          }
        },
        "required": [
          "user",
          "domain",
          "name",
          "labels",
          "is_enabled",
          "has_recipient_verification",
          "verified_recipients",
          "pending_recipients",
          "recipients",
          "id",
          "object",
          "created_at",
          "updated_at",
          "storage_location",
          "has_imap"
        ],
        "example": {
          "user": {
            "email": "test@test.com",
            "display_name": "test@test.com",
            "id": "5efabd39xxxxxxx4512890b8"
          },
          "domain": {
            "name": "mailsire.com",
            "id": "5e3c0550xxxxxxx09b7ba023"
          },
          "name": "abc123",
          "labels": [],
          "is_enabled": true,
          "has_recipient_verification": false,
          "verified_recipients": [],
          "pending_recipients": [],
          "recipients": [
            "abc@test1.com"
          ],
          "id": "62fa3dcxxxxxxx79dda83ff2",
          "object": "alias",
          "created_at": "2022-08-15T12:36:26.593Z",
          "updated_at": "2022-08-15T12:36:26.593Z",
          "storage_location": "storage_loc",
          "has_imap": false
        }
      },
      "AliasInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Имя псевдонима (если не указано или пусто, то генерируется случайный псевдоним)"
          },
          "recipients": {
            "oneOf": [
              {
                "type": "string",
                "description": "Строка допустимых адресов электронной почты, полных доменных имен, IP-адресов или URL-адресов веб-перехватчиков, разделенных разрывами строк, пробелами или запятыми"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                },
                "description": "Массив допустимых получателей"
              }
            ],
            "description": "Список получателей. Если не указан или пуст, по умолчанию используется адрес электронной почты отправителя запроса."
          },
          "description": {
            "type": "string",
            "description": "Описание псевдонима"
          },
          "labels": {
            "oneOf": [
              {
                "type": "string",
                "description": "Строка меток, разделенная разрывом строки/пробелом/запятой"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Массив этикеток"
              }
            ]
          },
          "has_recipient_verification": {
            "type": "boolean",
            "description": "Требовать от получателей нажатия ссылки подтверждения (по умолчанию установлено в настройках домена)"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Включить или отключить этот псевдоним"
          },
          "error_code_if_disabled": {
            "type": "number",
            "enum": [
              250,
              421,
              550
            ],
            "description": "Код ошибки, если псевдоним отключен. По умолчанию — 250."
          },
          "has_imap": {
            "type": "boolean",
            "description": "Включить или отключить хранилище IMAP для этого псевдонима"
          },
          "has_pgp": {
            "type": "boolean",
            "description": "Включить или отключить шифрование OpenPGP для этого псевдонима"
          },
          "public_key": {
            "type": "string",
            "description": "Открытый ключ OpenPGP в формате ASCII Armor"
          },
          "max_quota": {
            "type": "string",
            "description": "Максимальная квота хранилища (например, «1 ГБ»)"
          },
          "vacation_responder_is_enabled": {
            "type": "boolean",
            "description": "Включить или отключить автоответчик"
          },
          "vacation_responder_start_date": {
            "type": "string",
            "description": "Дата начала (например, «ГГГГ-ММ-ДД») для автоответчика"
          },
          "vacation_responder_end_date": {
            "type": "string",
            "description": "Дата окончания (например, «ГГГГ-ММ-ДД») для автоответчика"
          },
          "vacation_responder_subject": {
            "type": "string",
            "description": "Тема сообщения в виде открытого текста для автоответчика"
          },
          "vacation_responder_message": {
            "type": "string",
            "description": "Текстовое сообщение для автоответчика"
          }
        }
      },
      "AliasUpdateInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Псевдоним"
          },
          "recipients": {
            "oneOf": [
              {
                "type": "string",
                "description": "Строка допустимых адресов электронной почты, полных доменных имен, IP-адресов или URL-адресов веб-перехватчиков, разделенных разрывами строк, пробелами или запятыми"
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "email"
                },
                "description": "Массив допустимых получателей"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "Описание псевдонима"
          },
          "labels": {
            "oneOf": [
              {
                "type": "string",
                "description": "Строка меток, разделенная разрывом строки/пробелом/запятой"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Массив этикеток"
              }
            ]
          },
          "has_recipient_verification": {
            "type": "boolean",
            "description": "Требовать от получателей нажатия ссылки подтверждения (по умолчанию установлено в настройках домена)"
          },
          "is_enabled": {
            "type": "boolean",
            "description": "Включить или отключить псевдоним"
          },
          "error_code_if_disabled": {
            "type": "number",
            "enum": [
              250,
              421,
              550
            ],
            "description": "Код ошибки, который следует использовать, если псевдоним отключен (по умолчанию 250)"
          },
          "has_imap": {
            "type": "boolean",
            "description": "Включить или отключить хранилище IMAP"
          },
          "has_pgp": {
            "type": "boolean",
            "description": "Включить или отключить шифрование OpenPGP"
          },
          "public_key": {
            "type": "string",
            "description": "Открытый ключ OpenPGP в формате ASCII Armor"
          },
          "max_quota": {
            "type": "string",
            "description": "Максимальная квота хранилища (например, «1 ГБ»)"
          },
          "vacation_responder_is_enabled": {
            "type": "boolean",
            "description": "Включить или отключить автоответчик"
          },
          "vacation_responder_start_date": {
            "type": "string",
            "description": "Дата начала отпуска (например, ГГГГ-ММ-ДД)"
          },
          "vacation_responder_end_date": {
            "type": "string",
            "description": "Дата окончания отпуска (например, ГГГГ-ММ-ДД)"
          },
          "vacation_responder_subject": {
            "type": "string",
            "description": "Тема ответа на вопрос об отпуске открытым текстом"
          },
          "vacation_responder_message": {
            "type": "string",
            "description": "Текстовое сообщение автоответчика"
          }
        }
      },
      "GenerateAliasPasswordInput": {
        "type": "object",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "Ваш новый пароль для использования в качестве псевдонима"
          },
          "password": {
            "type": "string",
            "description": "Существующий пароль для псевдонима, чтобы изменить его без удаления хранилища почтового ящика"
          },
          "is_override": {
            "type": "boolean",
            "description": "Переопределить существующий пароль и удалить хранилище IMAP (использовать с осторожностью)"
          },
          "emailed_instructions": {
            "type": "string",
            "format": "email",
            "description": "Адрес электронной почты для отправки пароля псевдонима и инструкций по настройке"
          }
        }
      },
      "EmailLimit": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "Текущее количество отправленных писем"
          },
          "limit": {
            "type": "integer",
            "description": "Максимально допустимое количество писем"
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Идентификатор участника"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Адрес электронной почты участника"
          },
          "role": {
            "type": "string",
            "description": "Роль участника"
          }
        }
      },
      "Invite": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Приглашенный адрес электронной почты"
          }
        }
      }
    },
    "parameters": {
      "page": {
        "name": "page",
        "in": "query",
        "description": "Страница с результатами для возврата. Если значение не указано, оно будет равно 1. Должно быть числом, большим или равным 1.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Количество результатов, возвращаемых на страницу. По умолчанию 10, если не указано иное. Должно быть числом больше или равно 1 и меньше или равно 50.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50,
          "default": 10
        }
      },
      "pagination": {
        "name": "pagination",
        "in": "query",
        "description": "Подключить пагинацию до 1 ноября 2024 г.",
        "schema": {
          "type": "boolean"
        }
      },
      "domainId": {
        "name": "domain_id",
        "in": "path",
        "required": true,
        "description": "Идентификатор домена",
        "schema": {
          "type": "string"
        }
      },
      "aliasId": {
        "name": "alias_id",
        "in": "path",
        "required": true,
        "description": "Псевдоним ID",
        "schema": {
          "type": "string"
        }
      },
      "memberId": {
        "name": "member_id",
        "in": "path",
        "required": true,
        "description": "Идентификатор участника",
        "schema": {
          "type": "string"
        }
      },
      "emailId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Идентификатор электронной почты",
        "schema": {
          "type": "string"
        }
      },
      "contactId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Контактный идентификатор",
        "schema": {
          "type": "string"
        }
      },
      "calendarId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Идентификатор календаря",
        "schema": {
          "type": "string"
        }
      },
      "folderId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Идентификатор папки или путь",
        "schema": {
          "type": "string"
        }
      },
      "messageId": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Идентификатор сообщения",
        "schema": {
          "type": "string"
        }
      }
    },
    "responses": {
      "Error": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PreconditionFailed": {
        "description": "Precondition Failed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "TooManyRequests": {
        "description": "Too Many Requests",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotImplemented": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "BadGateway": {
        "description": "Bad Gateway",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "GatewayTimeout": {
        "description": "Gateway Time-out",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/v1/account": {
      "get": {
        "tags": [
          "Счет"
        ],
        "summary": "Восстановить учетную запись",
        "description": "Получите информацию о своей учетной записи.",
        "operationId": "retrieveAccount",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Account retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Счет"
        ],
        "summary": "Обновить аккаунт",
        "description": "Обновите информацию своей учетной записи.",
        "operationId": "updateAccount",
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "description": "Отображаемое имя"
                  },
                  "locale": {
                    "type": "string",
                    "description": "Предпочтения локали"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Account updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/contacts": {
      "get": {
        "tags": [
          "Контакты"
        ],
        "summary": "Список контактов",
        "description": "Получить список всех контактов для аутентифицированного псевдонима. Эта конечная точка поддерживает пагинацию и возвращает контакты в формате CardDAV.",
        "operationId": "listContacts",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts retrieved successfully",
            "headers": {
              "X-Page-Count": {
                "description": "Total number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Current": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Size": {
                "description": "Number of items on current page",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Item-Count": {
                "description": "Total number of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Контакты"
        ],
        "summary": "Создать контакт",
        "description": "Создайте новый контакт. Вы можете предоставить либо непосредственно содержимое vCard, либо отдельные поля контакта, которые будут преобразованы в формат vCard. Если контакт с таким же идентификатором уже существует, будет возвращена ошибка конфликта.",
        "operationId": "createContact",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/contacts/{id}": {
      "get": {
        "tags": [
          "Контакты"
        ],
        "summary": "Восстановить контакт",
        "description": "Получить конкретный контакт по его идентификатору. Контакт возвращается в стандартном формате Contact с содержимым vCard и проанализированными полями.",
        "operationId": "retrieveContact",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contactId"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Контакты"
        ],
        "summary": "Обновить контакт",
        "description": "Обновите существующий контакт. Вы можете предоставить как обновлённое содержимое vCard, так и отдельные поля для обновления. Если вы предоставите отдельные поля, vCard контакта будет сгенерирована заново.",
        "operationId": "updateContact",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contactId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Контакты"
        ],
        "summary": "Удалить контакт",
        "description": "Удалить определённый контакт навсегда. Это действие не может быть отменено.",
        "operationId": "deleteContact",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contactId"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/calendars": {
      "get": {
        "tags": [
          "Календари"
        ],
        "summary": "Список календарей",
        "description": "Получить список всех календарей для аутентифицированного псевдонима. Эта конечная точка поддерживает пагинацию и возвращает календари в формате CalDAV.",
        "operationId": "listCalendars",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "Calendars retrieved successfully",
            "headers": {
              "X-Page-Count": {
                "description": "Total number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Current": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Size": {
                "description": "Number of items on current page",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Item-Count": {
                "description": "Total number of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Calendar"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Календари"
        ],
        "summary": "Создать календарь",
        "description": "Создайте новый календарь. Имя календаря обязательно, другие свойства, такие как цвет, часовой пояс и описание, необязательны. Если календарь с таким именем уже существует, будет возвращена ошибка конфликта.",
        "operationId": "createCalendar",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Calendar created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/calendars/{id}": {
      "get": {
        "tags": [
          "Календари"
        ],
        "summary": "Получить календарь",
        "description": "Получить конкретный календарь по его идентификатору. Календарь возвращается со всеми своими свойствами, включая название, описание, цвет, часовой пояс и порядок.",
        "operationId": "retrieveCalendar",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/calendarId"
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Календари"
        ],
        "summary": "Обновление календаря",
        "description": "Обновите существующий календарь. Вы можете изменить любые свойства календаря, включая название, описание, цвет, часовой пояс и порядок. Если изменить название на уже существующее, возникнет ошибка конфликта.",
        "operationId": "updateCalendar",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/calendarId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Calendar updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Календари"
        ],
        "summary": "Удалить календарь",
        "description": "Удалить выбранный календарь навсегда. Это действие не может быть отменено и также удалит все события в календаре.",
        "operationId": "deleteCalendar",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/calendarId"
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/folders": {
      "get": {
        "tags": [
          "Папки"
        ],
        "summary": "Список папок",
        "description": "Получает список всех папок/почтовых ящиков IMAP для аутентифицированного псевдонима. Эта конечная точка поддерживает пагинацию и фильтрацию по статусу подписки.",
        "operationId": "listFolders",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "subscribed",
            "in": "query",
            "description": "Фильтровать папки по статусу подписки",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Folders retrieved successfully",
            "headers": {
              "X-Page-Count": {
                "description": "Total number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Current": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Size": {
                "description": "Number of items on current page",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Item-Count": {
                "description": "Total number of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Folder"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Папки"
        ],
        "summary": "Создать папку",
        "description": "Создайте новую папку/почтовый ящик IMAP. Путь к папке обязателен и может включать родительские папки (например, «INBOX/Подпапка»). Если родительские папки отсутствуют, они будут созданы автоматически.",
        "operationId": "createFolder",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folder created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/folders/{id}": {
      "get": {
        "tags": [
          "Папки"
        ],
        "summary": "Восстановить папку",
        "description": "Получить конкретную папку по её идентификатору или пути. В качестве идентификатора можно использовать ObjectID папки или её полный путь (например, «INBOX/Subfolder»).",
        "operationId": "retrieveFolder",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/folderId"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Папки"
        ],
        "summary": "Обновить папку",
        "description": "Обновить/переименовать существующую папку. Эта операция переименовывает папку в соответствии с новым путём, указанным в теле запроса. В качестве идентификатора можно использовать ObjectID папки или её текущий путь.",
        "operationId": "updateFolder",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/folderId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Folder updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Папки"
        ],
        "summary": "Удалить папку",
        "description": "Удалить определённую папку навсегда. Это действие не может быть отменено и также удалит все сообщения в папке. В качестве идентификатора можно использовать ObjectID папки или путь к ней.",
        "operationId": "deleteFolder",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/folderId"
          }
        ],
        "responses": {
          "200": {
            "description": "Folder deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Folder"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/messages": {
      "get": {
        "tags": [
          "Сообщения"
        ],
        "summary": "Список и поиск сообщений",
        "description": "Получайте список сообщений с расширенными возможностями поиска и фильтрации. Эта конечная точка поддерживает постраничную навигацию и комплексный поиск по содержимому сообщений, заголовкам, флагам и метаданным. Вы можете искать по папке, флагам, содержимому, заголовкам, диапазонам дат, размеру и другим параметрам.",
        "operationId": "listMessages",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "name": "folder",
            "in": "query",
            "description": "Фильтровать сообщения по пути к папке",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_unread",
            "in": "query",
            "description": "Фильтр по статусу прочтения",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_flagged",
            "in": "query",
            "description": "Фильтр по помеченному статусу",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_deleted",
            "in": "query",
            "description": "Фильтр по удаленному статусу",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_draft",
            "in": "query",
            "description": "Фильтр по статусу черновика",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_junk",
            "in": "query",
            "description": "Фильтр по статусу спама/нежелательной почты",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_copied",
            "in": "query",
            "description": "Фильтр по статусу копирования",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_searchable",
            "in": "query",
            "description": "Фильтр по статусу поиска",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_expired",
            "in": "query",
            "description": "Фильтр по просроченному статусу",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "has_attachments",
            "in": "query",
            "description": "Фильтр по наличию вложений",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "has_attachment",
            "in": "query",
            "description": "Фильтр по наличию вложений (псевдоним для has_attachments)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Поиск по теме сообщения",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "body",
            "in": "query",
            "description": "Поиск в тексте сообщения",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "Поиск в тексте сообщения (псевдоним тела)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "headers",
            "in": "query",
            "description": "Поиск во всех заголовках сообщений",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "message_id",
            "in": "query",
            "description": "Поиск по заголовку Message-ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Общий поиск по заголовкам и тексту",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Общий поиск (псевдоним для поиска)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Фильтр сообщений с этой даты (формат ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "before",
            "in": "query",
            "description": "Фильтровать сообщения до этой даты (формат ISO 8601)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "min_size",
            "in": "query",
            "description": "Фильтровать сообщения по минимальному размеру в байтах",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "max_size",
            "in": "query",
            "description": "Фильтровать сообщения по максимальному размеру в байтах",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Поиск по заголовку «Из»",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Поиск по заголовку «Кому»",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cc",
            "in": "query",
            "description": "Поиск по заголовку CC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bcc",
            "in": "query",
            "description": "Поиск по заголовку BCC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Поиск по заголовку даты",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reply-to",
            "in": "query",
            "description": "Поиск по заголовку «Ответить»",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "headers": {
              "X-Page-Count": {
                "description": "Total number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Current": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Page-Size": {
                "description": "Number of items on current page",
                "schema": {
                  "type": "integer"
                }
              },
              "X-Item-Count": {
                "description": "Total number of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Сообщения"
        ],
        "summary": "Создать сообщение",
        "description": "Создание/добавление нового сообщения в папку. Эта конечная точка принимает стандартный формат сообщений Nodemailer и позволяет указать целевую папку и начальные флаги. Если целевая папка не существует, она будет создана автоматически.",
        "operationId": "createMessage",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Message created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/messages/{id}": {
      "get": {
        "tags": [
          "Сообщения"
        ],
        "summary": "Получить сообщение",
        "description": "Извлечение конкретного сообщения по его идентификатору. По умолчанию ответ включает в себя разобранный объект Nodemailer и необработанное содержимое сообщения. Вы можете управлять тем, что включается, с помощью параметров запроса.",
        "operationId": "retrieveMessage",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/messageId"
          },
          {
            "name": "eml",
            "in": "query",
            "description": "Возвращает необработанный формат EML вместо JSON",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "nodemailer",
            "in": "query",
            "description": "Включить проанализированный объект Nodemailer",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "attachments",
            "in": "query",
            "description": "Включить вложения в объект Nodemailer",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "raw",
            "in": "query",
            "description": "Включить необработанное содержание сообщения",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "message/rfc822": {
                "description": "Raw EML format (when ?eml=true)",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "tags": [
          "Сообщения"
        ],
        "summary": "Обновление сообщения",
        "description": "Обновите существующее сообщение. Вы можете изменить флаги сообщения или переместить его в другую папку. Если целевая папка не существует, она будет создана автоматически.",
        "operationId": "updateMessage",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/messageId"
          },
          {
            "name": "eml",
            "in": "query",
            "description": "Возвращает необработанный формат EML вместо JSON",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "message/rfc822": {
                "description": "Raw EML format (when ?eml=true)",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "Сообщения"
        ],
        "summary": "Удалить сообщение",
        "description": "Удалить определённое сообщение без возможности восстановления. Это действие не может быть отменено и навсегда удалит сообщение из хранилища. В отличие от IMAP-клиентов, которые обычно перемещают сообщения в корзину, эта конечная точка выполняет безвозвратное удаление.",
        "operationId": "deleteMessage",
        "security": [
          {
            "AliasAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/messageId"
          }
        ],
        "responses": {
          "200": {
            "description": "Message deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/v1/logs/download": {
      "get": {
        "summary": "Загрузить журналы",
        "description": "**Скачать журналы**\n\nОписание: Наш API позволяет программно загружать журналы вашей учётной записи. Отправка запроса на эту конечную точку обработает все журналы вашей учётной записи и отправит их вам по электронной почте в виде вложения (CSV-файл, сжатый Gzip).\n\nЭто позволяет создавать фоновые задания с помощью Cron-задания или с помощью программы планирования заданий Node.js Bree для получения журналов в любое удобное время. Обратите внимание, что эта конечная точка ограничена 10 запросами в день.\n\nВложение представляет собой строчную форму `email-deliverability-logs-YYYY-MM-DD-h-mm-A-z.csv.gz`, а само письмо содержит краткую сводку полученных журналов.",
        "tags": [
          "Журналы"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "domain",
            "in": "query",
            "description": "Фильтрация журналов по полному доменному имени (FQDN). Если имя не указано, будут извлечены все журналы по всем доменам.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Поиск журналов по адресу электронной почты, домену, псевдониму, IP-адресу или дате (формат М/Г, М/Д/ГГ, М-Д, М-Д-ГГ или М.Д.ГГ).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bounce_category",
            "in": "query",
            "description": "Поиск журналов по определенной категории отказов (например, «черный список»).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_code",
            "in": "query",
            "description": "Поиск журналов по определенному коду ответа об ошибке (например, 421 или 550).",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs will be emailed as an attachment",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logs will be emailed to you shortly"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/v1/emails": {
      "get": {
        "summary": "Список исходящих писем SMTP",
        "description": "**Список исходящих SMTP-сообщений**\n\nОбратите внимание, что эта конечная точка не возвращает значения свойств `message`, `headers` и `rejectedErrors` электронного письма.\n\nЧтобы получить эти свойства и их значения, используйте конечную точку [Retrieve email](https://github.com/forwardemail/forwardemail.net/blob/master/app/views/api/index.md#retrieve-email) с идентификатором электронной почты.",
        "tags": [
          "Электронные письма"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Поиск писем по метаданным.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Поиск писем по доменному имени.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Сортировка по указанному полю (префикс с одним дефисом — для сортировки в обратном направлении по этому полю). По умолчанию используется created_at, если не задано.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Более подробную информацию см. в разделе «Пагинация».",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Более подробную информацию см. в разделе «Пагинация».",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of outbound SMTP emails",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Email"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "summary": "Создать исходящее SMTP-сообщение",
        "description": "Наш API для создания электронных писем основан на конфигурации параметров сообщений Nodemailer и использует её. Для всех параметров тела письма ниже обратитесь к [конфигурации сообщений Nodemailer](https://nodemailer.com/message/).\n\nОбратите внимание, что, за исключением `envelope` и `dkim` (поскольку мы устанавливаем их автоматически), мы поддерживаем все параметры Nodemailer. В целях безопасности мы автоматически устанавливаем параметры `disableFileAccess` и `disableUrlAccess` в значение `true`.\n\nВам следует либо передать единственный параметр `raw` вместе с полным необработанным письмом, включая заголовки, либо передать отдельные параметры тела письма ниже.\n\nЭта конечная точка API автоматически кодирует эмодзи, если они встречаются в заголовках (например, тема `Subject: 🤓 Hello` автоматически преобразуется в `Subject: =?UTF-8?Q?=F0=9F=A4=93?= Hello`). Нашей целью было создать максимально удобный для разработчиков и защищенный от «чайников» API электронной почты.",
        "tags": [
          "Электронные письма"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMTP"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/v1/emails/limit": {
      "get": {
        "summary": "Получить лимит исходящей электронной почты SMTP",
        "description": "Это простая конечная точка, которая возвращает объект JSON, содержащий «количество» и «лимит» количества ежедневных исходящих SMTP-сообщений для каждой учетной записи.",
        "tags": [
          "Электронные письма"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email limit information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailLimit"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/v1/emails/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/emailId"
        }
      ],
      "get": {
        "summary": "Получить исходящую SMTP-почту",
        "description": "Получить определенное исходящее SMTP-сообщение электронной почты.",
        "tags": [
          "Электронные письма"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Удалить исходящую SMTP-почту",
        "description": "Удаление письма приведёт к установке статуса «отклонено» (и, следовательно, не будет обрабатываться в очереди) только в том случае, если текущий статус — «ожидание», «в очереди» или «отложенный». Мы можем автоматически удалять письма через 30 дней после их создания и/или отправки, поэтому вам следует сохранять копии исходящих SMTP-сообщений в вашем клиенте, базе данных или приложении. При желании вы можете использовать наш идентификатор электронной почты в вашей базе данных — это значение возвращается как конечными точками [Создать письмо] (https://github.com/forwardemail/forwardemail.net/blob/master/app/views/api/index.md#create-email), так и [Получить письмо] (https://github.com/forwardemail/forwardemail.net/blob/master/app/views/api/index.md#retrieve-email).",
        "tags": [
          "Электронные письма"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Email deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/domains": {
      "get": {
        "summary": "Список доменов",
        "description": "> [!NOTE]\n>С 1 ноября 2024 года конечные точки API для доменов List и псевдонимов доменов List будут по умолчанию отображать максимум 1000 результатов на страницу. Если вы хотите заранее включить это поведение, вы можете передать `?paginate=true` в качестве дополнительного параметра строки запроса в URL-адрес запроса конечной точки. Подробнее см. в разделе «Пагинация».",
        "tags": [
          "Домены"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Поиск доменов по метаданным.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "domain",
            "in": "query",
            "description": "Поиск доменов по доменному имени.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Сортировка по указанному полю (префикс с одним дефисом — для сортировки в обратном направлении по этому полю). По умолчанию используется created_at, если не задано.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Более подробную информацию см. в разделе «Пагинация».",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Более подробную информацию см. в разделе «Пагинация».",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      },
      "post": {
        "summary": "Создать домен",
        "description": "Создаёт новый домен в системе. Эта конечная точка позволяет зарегистрировать полное доменное имя (FQDN) или IP-адрес для использования с платформой.\n\nДополнительные параметры конфигурации включают назначение домена существующей команде, установку типа плана (например, бесплатный, улучшенная защита или командный) и настройку расширенных мер защиты, таких как фильтрация спама, сканирование на вирусы и проверка получателя. Вы также можете указать, следует ли создавать псевдоним для перехвата всех сообщений по умолчанию, задать URL-адрес веб-перехвата для сообщений об ошибках SMTP и определить квоты хранения для псевдонимов электронной почты в этом домене. Эта конечная точка выполняет проверку и подготовку на уровне домена. Если включен параметр `ignore_mx_check`, проверка MX-записи пропускается (рекомендуется только для расширенных настроек маршрутизации). Ответ будет содержать полную информацию о созданном объекте домена, включая записи DNS, необходимые для настройки.",
        "tags": [
          "Домены"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDomainInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/v1/domains/{domain_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "Получить домен",
        "description": "Получить определенный домен",
        "tags": [
          "Домены"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "Обновить домен",
        "description": "Обновить определенный домен.",
        "tags": [
          "Домены"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDomainInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Удалить домен",
        "description": "Удалить определенный домен.",
        "tags": [
          "Домены"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Domain deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/verify-records": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "Проверить записи домена",
        "description": "Проверьте записи DNS для определенного домена.",
        "tags": [
          "Домены"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "DNS records successfully verified",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Domain's DNS records have been verified."
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/verify-smtp": {
      "get": {
        "summary": "Проверьте записи SMTP домена",
        "description": "Проверяет записи DNS, связанные с SMTP, для указанного домена.",
        "operationId": "verifySmtpRecords",
        "tags": [
          "Домены"
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "required": true,
            "description": "Полное доменное имя (FQDN) для проверки",
            "schema": {
              "type": "string",
              "format": "hostname"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "SMTP records successfully verified",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "You have successfully configured and verified DNS records for outbound SMTP."
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/catch-all-passwords": {
      "post": {
        "summary": "Создайте пароль для всего домена",
        "description": "Создаёт универсальный пароль для всего домена. Если пароль не указан, будет сгенерирован случайный пароль.",
        "tags": [
          "Домены"
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Доменное имя, для которого будет создан универсальный пароль"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "new_password": {
                    "type": "string",
                    "description": "Ваш новый пароль для использования в качестве пароля для всех доменов. Оставьте поле пустым, чтобы создать надёжный пароль."
                  },
                  "description": {
                    "type": "string",
                    "description": "Описание приведено исключительно для организационных целей."
                  }
                }
              },
              "example": {
                "new_password": "myCustomStrongPassword123!",
                "description": "Password for team-wide access"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a catch-all password",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the created catch-all password"
                    },
                    "description": {
                      "type": "string",
                      "description": "Description of the catch-all password"
                    }
                  },
                  "required": [
                    "id",
                    "description"
                  ]
                },
                "example": {
                  "id": "6841ec462bd583c73d0632dd",
                  "username": "*@quas.com",
                  "password": "6Yq14XhAUaupdZE",
                  "description": "foo bar"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Список паролей для всех доменов",
        "description": "Возвращает список общедоменных паролей, которые в данный момент настроены для указанного домена.",
        "operationId": "listCatchAllPasswords",
        "tags": [
          "Домены"
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "required": true,
            "description": "Полное доменное имя (FQDN), для которого необходимо перечислить пароли для всеобщей аутентификации",
            "schema": {
              "type": "string",
              "format": "hostname"
            }
          }
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of domain-wide catch-all passwords",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Unique identifier for the item",
                        "example": "6841ec442bd583c73d0632d0"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the item",
                        "example": "foo bar"
                      }
                    },
                    "required": [
                      "id",
                      "description"
                    ]
                  },
                  "example": [
                    {
                      "id": "6841ec442bd583c73d0632d0",
                      "description": ""
                    },
                    {
                      "id": "6841ec462bd583c73d0632dd",
                      "description": "foo bar"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/catch-all-passwords/{token_id}": {
      "delete": {
        "summary": "Удалить пароль для всех доменов",
        "description": "Удаляет общедоменный пароль, используя предоставленный идентификатор токена.",
        "tags": [
          "Домены"
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Доменное имя, связанное с универсальным паролем"
          },
          {
            "name": "token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Идентификатор токена общедоменного пароля для удаления"
          }
        ],
        "responses": {
          "200": {
            "description": "Catch-all password successfully removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Catch-all password deleted successfully."
                    }
                  },
                  "example": {
                    "id": "6841ec442bd583c73d0632d0",
                    "description": ""
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/invites": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "Принять приглашение домена",
        "description": "Принять приглашение в домен.",
        "tags": [
          "Приглашения"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain invite accepted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invite accepted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "summary": "Создать приглашение на домен",
        "description": ">[!IMPORTANT]\n>Если приглашаемый пользователь уже является принятым участником любого другого домена, к которому принадлежит приглашающий его администратор, то приглашение будет принято автоматически и не будет отправлено электронное письмо.",
        "tags": [
          "Приглашения"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Адрес электронной почты для приглашения в список участников домена"
                  },
                  "group": {
                    "type": "string",
                    "format": "string",
                    "description": "Группа, к которой нужно добавить пользователя для членства в домене (может быть `\"admin\"` или `\"user\"`)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain invite created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      },
      "delete": {
        "summary": "Удалить приглашение домена",
        "description": "Удалить приглашение в домен.",
        "tags": [
          "Приглашения"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Адрес электронной почты, который нужно удалить из списка участников домена"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain invite removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invite removed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/members/{member_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        },
        {
          "$ref": "#/components/parameters/memberId"
        }
      ],
      "put": {
        "summary": "Обновление члена домена",
        "description": "Обновление члена домена.",
        "tags": [
          "Участники"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group": {
                    "required": true,
                    "type": "string",
                    "description": "Группа для обновления членства пользователя в домене (может быть `\"admin\"` или `\"user\"`)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain member updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Member"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "delete": {
        "summary": "Удалить участника домена",
        "description": "Удалить участника домена.",
        "tags": [
          "Участники"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain member removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Member removed successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/aliases/{alias_id}/generate-password": {
      "post": {
        "summary": "Сгенерировать пароль псевдонима",
        "description": "Сгенерируйте пароль для псевдонима. Если `emailed_instructions` не указан, ответ будет содержать сгенерированные имя пользователя и пароль.",
        "tags": [
          "Псевдонимы"
        ],
        "parameters": [
          {
            "name": "domain_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Полное доменное имя (FQDN)"
          },
          {
            "name": "alias_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Уникальный идентификатор псевдонима"
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateAliasPasswordInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Alias credentials returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "example": "alias@yourdomain.com"
                    },
                    "password": {
                      "type": "string",
                      "example": "some-generated-password"
                    }
                  },
                  "required": [
                    "username",
                    "password"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/aliases": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        }
      ],
      "get": {
        "summary": "Список доменных псевдонимов",
        "description": ">[!NOTE]\n>С 1 ноября 2024 года конечные точки API для «Списка доменов» и «Списка псевдонимов доменов» по умолчанию будут отображать максимум 1000 результатов на страницу. Если вы хотите заранее включить это поведение, вы можете передать `?paginate=true` в качестве дополнительного параметра строки запроса в URL-адрес запроса конечной точки. Подробнее см. в разделе «Пагинация».",
        "tags": [
          "Псевдонимы"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "Поиск псевдонимов в домене по имени, метке или получателю (поддерживается RegExp)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Поиск псевдонимов в домене по имени (поддерживается RegExp)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipient",
            "in": "query",
            "description": "Поиск псевдонимов в домене по получателю (поддерживается RegExp)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Сортировать по заданному полю (префикс с одним дефисом — для сортировки в обратном порядке). По умолчанию — created_at.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "List of domain aliases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Alias"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "post": {
        "summary": "Создать новый псевдоним домена",
        "description": "Создайте новый псевдоним для определенного домена.",
        "tags": [
          "Псевдонимы"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain alias created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequests"
          }
        }
      }
    },
    "/v1/domains/{domain_id}/aliases/{alias_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/domainId"
        },
        {
          "$ref": "#/components/parameters/aliasId"
        }
      ],
      "get": {
        "summary": "Получить псевдоним домена",
        "description": "Получить определенный псевдоним для домена.",
        "tags": [
          "Псевдонимы"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain alias retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      },
      "put": {
        "summary": "Обновить псевдоним домена",
        "description": "Обновите определенный псевдоним для домена.",
        "tags": [
          "Псевдонимы"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain alias updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alias"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "403": {
            "$ref": "#/components/responses/Error"
          },
          "404": {
            "$ref": "#/components/responses/Error"
          }
        }
      },
      "delete": {
        "summary": "Удалить псевдоним домена",
        "description": "Удалить определенный псевдоним для домена.",
        "tags": [
          "Псевдонимы"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Domain alias deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Alias deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          }
        }
      }
    },
    "/v1/encrypt": {
      "post": {
        "summary": "Зашифровать TXT-запись",
        "description": "Мы позволяем вам шифровать записи бесплатно даже на бесплатном тарифе. Конфиденциальность не должна быть просто функцией, она должна быть неотъемлемой частью всех аспектов продукта. Мы добавили эту функцию по многочисленным просьбам в [обсуждении руководств по конфиденциальности](https://discuss.privacyguides.net/t/forward-email-email-provider/13370) и в [обсуждении проблем на GitHub](https://github.com/forwardemail/forwardemail.net/issues/254).",
        "tags": [
          "Шифровать"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text"
                ],
                "properties": {
                  "input": {
                    "required": true,
                    "type": "string",
                    "description": "Любая допустимая запись открытого текста TXT для пересылки электронной почты"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Text encrypted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "encrypted": {
                      "type": "string",
                      "description": "Encrypted text"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "401": {
            "$ref": "#/components/responses/Error"
          },
          "429": {
            "description": "Rate limit exceeded (50 requests for 'encrypt')",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Счет",
      "description": "Конечные точки управления учетными записями"
    },
    {
      "name": "Журналы",
      "description": "Конечные точки управления журналами"
    },
    {
      "name": "Электронные письма",
      "description": "Конечные точки управления электронной почтой"
    },
    {
      "name": "Домены",
      "description": "> [!TIP]\n> Конечные точки домена с именем <code>/v1/domains/:domain\\_name</code> взаимозаменяемы с идентификатором домена <code>:domain\\_id</code>. Это означает, что вы можете ссылаться на домен либо по его значению <code>name</code>, либо по значению <code>id</code>."
    },
    {
      "name": "Приглашения",
      "description": "Конечные точки управления приглашениями домена"
    },
    {
      "name": "Участники",
      "description": "Конечные точки управления членами домена"
    },
    {
      "name": "Псевдонимы",
      "description": "Конечные точки управления псевдонимами домена"
    },
    {
      "name": "Шифровать",
      "description": "Конечные точки шифрования"
    },
    {
      "name": "Контакты",
      "description": "Конечные точки управления псевдонимами контактов (CardDAV)\n\n>[!NOTE]\n>В отличие от других конечных точек API, для этих конечных точек требуется аутентификация с указанием имени пользователя псевдонима и пароля, сгенерированного псевдонимом, в качестве заголовков базовой авторизации.\n\n>[!TIP]\n>Эти конечные точки предоставляют полный набор CRUD-операций для управления контактами с поддержкой vCard, включая создание, извлечение, обновление и удаление контактов. Вы можете предоставить как непосредственно содержимое vCard, так и отдельные поля контактов, которые будут преобразованы в формат vCard."
    },
    {
      "name": "Календари",
      "description": "Конечные точки управления псевдонимами календарей (CalDAV)\n\n>[!NOTE]\n> В отличие от других конечных точек API, для этих конечных точек требуется [Authentication](#description/authentication) \"username\", совпадающий с именем пользователя псевдонима, и \"password\", совпадающий с паролем, сгенерированным псевдонимом, в качестве заголовков базовой авторизации.\n\n>[!TIP]\n> Эти конечные точки обеспечивают полное управление календарями с поддержкой часовых поясов и цветов, включая создание, извлечение, обновление и удаление календарей. Названия календарей обязательны, другие свойства, такие как цвет, часовой пояс и описание, необязательны."
    },
    {
      "name": "Сообщения",
      "description": "Конечные точки управления сообщениями-псевдонимами (IMAP/POP3)\n\n>[!NOTE]\n> В отличие от других конечных точек API, для этих конечных точек требуется [Аутентификация](#description/authentication) «имя пользователя», равное имени пользователя-псевдонима, и «пароль», равный сгенерированному паролю-псевдониму, в качестве заголовков базовой авторизации.\n\n>[!TIP]\n> Эти конечные точки обеспечивают комплексное управление сообщениями с расширенными возможностями поиска. Вы можете искать по папкам, флагам, содержимому, заголовкам, диапазонам дат, размеру и другим параметрам. Сообщения можно создавать в стандартном формате Nodemailer, они поддерживают перемещение между папками и управление флагами.\n\nУбедитесь, что вы выполнили инструкции по настройке для своего домена.\nЭти инструкции можно найти в разделе часто задаваемых вопросов [Поддерживаете ли вы получение электронной почты по протоколу IMAP?](/faq#do-you-support-receiving-email-with-imap)."
    },
    {
      "name": "Папки",
      "description": "Конечные точки управления псевдонимами папок (IMAP/POP3)\n\n>[!TIP]\n> Конечные точки папок с путём <code>/v1/folders/:path</code> взаимозаменяемы с идентификатором папки <code>:id</code>. Это означает, что вы можете ссылаться на папку по её значению <code>path</code> или <code>id</code>.\n\n>[!NOTE]\n> В отличие от других конечных точек API, для этих конечных точек требуется [Authentication](#description/authentication) \"username\", равный имени пользователя псевдонима, и \"password\", равный паролю, сгенерированному псевдонимом, в качестве заголовков базовой авторизации.\n\n>[!TIP]\n> Эти конечные точки обеспечивают полное управление папками, включая создание, переименование и удаление. Пути к папкам могут включать родительские папки (например, «INBOX/Subfolder»), и родительские папки будут созданы автоматически, если они не существуют."
    }
  ]
}