//- Pug makes it DOCTYPE if we do this:
//- `doctype html`
!= "<!doctype html>"
- const isNotPrivateRoute = ["/my-account", "/admin", "/verify", "/denylist", "/forgot-password", "/reset-password", "/help", "/auth", "/register", config.loginOtpRoute, config.loginRoute, config.verifyRoute, config.otpRoutePrefix].every((s) => !ctx.pathWithoutLocale.startsWith(s));
html.h-100.no-js(
  lang=locale,
  class=isBot(ctx.get("User-Agent")) ? "bot-detected" : "",
  dir=["ar", "he"].includes(locale) ? "rtl" : false
)
  head
    block meta
      meta(charset="utf-8")
      meta(http-equiv="x-ua-compatible", content="ie=edge")
      if meta && meta.title
        title= striptags(convert(meta.title))
      if meta && meta.description
        meta(name="description", content=striptags(convert(meta.description)))
      meta(name="viewport", content="width=device-width, initial-scale=1")

      //- Add preconnect for key domains to establish early connections
      link(rel="preconnect", href="https://www.youtube-nocookie.com")
      link(rel="preconnect", href=config.urls.web)
      link(rel="preconnect", href="https://challenges.cloudflare.com")
      link(rel="dns-prefetch", href="https://challenges.cloudflare.com")

      //- search
      //- <https://stackoverflow.com/q/44189748>
      link(
        rel="search",
        type="application/opensearchdescription+xml",
        title="Forward Email",
        href="/opensearch.xml"
      )

      //- canonical
      link(
        rel="canonical",
        href=canonical ? canonical : `${config.urls.web}${ctx.path}`
      )

      //- feeds
      link(
        rel="alternate",
        href=`${config.urls.web}/blog/feed/atom`,
        type="application/atom+xml",
        title="Atom 1.0"
      )
      link(
        rel="alternate",
        href=`${config.urls.web}/blog/feed/rss`,
        type="application/rss+xml",
        title="RSS 2.0"
      )
      link(
        rel="alternate",
        href=`${config.urls.web}/blog/feed/json`,
        type="application/json",
        title="JSON Feed 1.0"
      )

      //- languages supported
      //- <https://support.google.com/webmasters/answer/189077?hl=en>
      //- <https://support.google.com/webmasters/answer/182192?hl=en>
      //- <https://webmasters.stackexchange.com/questions/126514/should-en-and-x-default-be-included-on-the-same-page-for-hreflang-tags>
      //- <https://www.searchviu.com/en/multiple-hreflang-tags-one-url/>
      //- <https://twitter.com/JohnMu/status/837326127089729536>
      link(
        rel="alternate",
        href=`${config.urls.web}/${defaultLocale}${ctx.pathWithoutLocale === '/' ? '' : ctx.pathWithoutLocale}`,
        hreflang="x-default"
      )
      if availableLanguages
        each language in availableLanguages
          link(
            rel="alternate",
            href=`${config.urls.web}/${language.locale}${ctx.pathWithoutLocale === '/' ? '' : ctx.pathWithoutLocale}`,
            hreflang=language.locale
          )

      //- generated with https://realfavicongenerator.net
      link(
        rel="apple-touch-icon",
        sizes="152x152",
        href=manifest("img/apple-touch-icon.png"),
        integrity=manifest("img/apple-touch-icon.png", "integrity"),
        crossorigin="anonymous"
      )
      if (domain && domain.name && config && config.ubuntuTeamMapping && Object.keys(config.ubuntuTeamMapping).includes(domain.name)) || ['/ubuntu','/kubuntu','/lubuntu','/edubuntu','/ubuntu-studio'].includes(ctx.pathWithoutLocale)
        link(
          rel="icon",
          type="image/png",
          href=manifest("img/ubuntu-one-favicon-32x32.png"),
          sizes="32x32",
          integrity=manifest("img/ubuntu-one-favicon-32x32.png", "integrity"),
          crossorigin="anonymous"
        )
        link(
          rel="icon",
          type="image/png",
          href=manifest("img/ubuntu-one-favicon-16x16.png"),
          sizes="16x16",
          integrity=manifest("img/ubuntu-one-favicon-16x16.png", "integrity"),
          crossorigin="anonymous"
        )
      else
        link(
          rel="alternate icon",
          type="image/png",
          href=manifest("img/favicon-32x32.png"),
          sizes="32x32",
          integrity=manifest("img/favicon-32x32.png", "integrity"),
          crossorigin="anonymous"
        )
        link(
          rel="alternate icon",
          type="image/png",
          href=manifest("img/favicon-16x16.png"),
          sizes="16x16",
          integrity=manifest("img/favicon-16x16.png", "integrity"),
          crossorigin="anonymous"
        )
        link(
          rel="icon",
          type="image/svg+xml",
          href=manifest("img/favicon.svg"),
          integrity=manifest("img/favicon.svg", "integrity"),
          crossorigin="anonymous"
        )
      //- href=manifest("site.webmanifest"),
      //- integrity=manifest("site.webmanifest", "integrity"),
      link(rel="manifest", href="/site.webmanifest", crossorigin="anonymous")
      meta(name="apple-mobile-web-app-title", content=config.appName)
      meta(name="application-name", content=config.appName)
      meta(name="msapplication-TileColor", content=config.appColor)
      meta(name="theme-color", content="#ffffff")

      //- <https://stackoverflow.com/questions/76791110/how-to-resolve-error-with-permissions-policy-header-origin-trial-controlled-fea>
      //- <https://github.com/orgs/community/discussions/52356>
      //-.
        meta(
          http-equiv="Permissions-Policy",
          content="interest-cohort=(), user-id=()"
        )

      //- Inline critical JS with minimal impact on FCP
      script(nonce=nonce).
        (function () {
          // Execute after first paint using requestAnimationFrame
          requestAnimationFrame(function () {
            document.documentElement.className = document.documentElement.className.replace("no-js", "").replace(/\s+/g, " ").trim();
          });
        })();

      script(nonce=nonce).
        // Load animations after LCP
        window.addEventListener("load", function () {
          // Function to show deferred animations
          function showDeferredAnimations() {
            // Show rocket animation
            var rocket = document.getElementById("rocket");
            if (rocket) {
              rocket.classList.add("loaded");
            }

            // Show freddy image (static -> gif)
            var waving = document.getElementById("waving");
            if (waving) {
              waving.classList.add("loaded");
            }
          }

          // Delay animations to improve LCP
          setTimeout(showDeferredAnimations, 3000);
        });

      if isBot(ctx.get('User-Agent'))
        style(nonce=nonce)= ".is-bot { display: none !important; }"

    //- add opengraph tags to your structured data pages
    block opengraph
      //- integrity=manifest(`og${ctx.path}.png`, "integrity"),
      - const ogImage = `${config.urls.web}${ctx.path}${ctx.pathWithoutLocale === "/" ? "/index" : ""}.png?v=${config.env === "test" ? 0 : Date.now()}`;
      link(
        rel="image_src",
        type="image/png",
        href=ogImage,
        crossorigin="anonymous"
      )
      meta(property="og:locale", content=locale)
      meta(property="og:type", content="article")
      meta(property="og:title", content=striptags(convert(meta.title)))
      meta(
        property="og:description",
        content=striptags(convert(meta.description))
      )
      meta(property="og:url", content=`${config.urls.web}${ctx.path}`)
      meta(property="og:site_name", content=config.appName)
      if ctx.pathWithoutLocale.startsWith('/faq')
        meta(
          property="article:section",
          content=t("Frequently Asked Questions")
        )
      else if ctx.pathWithoutLocale.startsWith('/guides')
        meta(property="article:section", content=t("Guides"))
      meta(property="og:image:alt", content=striptags(convert(meta.title)))
      //-.
        if gif
          meta(property="og:image:type", content="image/gif")
          meta(property="og:image", content=manifest(`img/guides/${gif}.gif`))
          meta(property="og:image:secure_url", content=manifest(`img/guides/${gif}.gif`))
          meta(property="og:image:width", content="960")
          meta(property="og:image:height", content="540")
      meta(property="og:image:type", content="image/png")
      meta(property="og:image", content=ogImage)
      meta(property="og:image:secure_url", content=ogImage)
      meta(property="og:image:width", content="1200")
      meta(property="og:image:height", content="630")

      if ['/', '/resources', '/about', '/terms', '/about', '/faq', '/private-business-email', ...Object.keys(useCases)].includes(ctx.pathWithoutLocale) || ctx.pathWithoutLocale.startsWith('/blog/docs') || ctx.pathWithoutLocale.startsWith('/guides')
        //- in order for snapshots to be consistent we need the same date to be used
        meta(
          property="og:updated_time",
          content=config.env === "test" ? "2023-01-01T00:00:00.000Z" : publishedISOString ? publishedISOString : dayjs().startOf("day").toDate().toISOString()
        )
        meta(
          property="article:published_time",
          content=config.env === "test" ? "2023-01-01T00:00:00.000Z" : publishedISOString ? publishedISOString : dayjs().startOf("month").toDate().toISOString()
        )
        meta(
          property="article:modified_time",
          content=config.env === "test" ? "2023-01-01T00:00:00.000Z" : publishedISOString ? publishedISOString : dayjs().startOf("day").toDate().toISOString()
        )

      if !video
        //- og video tag
        if ['/', '/private-business-email', ...Object.keys(useCases)].includes(ctx.pathWithoutLocale)
          - video = "https://www.youtube.com/watch?v=N6zjv40zuIY";
        else if ctx.pathWithoutLocale === "/guides/send-mail-as-gmail-custom-domain"
          //- gmail specific guide
          - video = "https://www.youtube.com/watch?v=MEheS8gM4Xs";
        else if ctx.pathWithoutLocale === "/guides/send-email-with-custom-domain-smtp"
          //- custom domain
          - video = "https://www.youtube.com/watch?v=MEheS8gM4Xs";
        else if ctx.pathWithoutLocale.startsWith('/blog/docs')
          //- developers
          - video = "https://www.youtube.com/watch?v=1e9UyIoFu4Y";
        else if !ctx.pathWithoutLocale.startsWith('/guides') && isNotPrivateRoute
          //- fallback with what is an alias video
          - video = "https://www.youtube.com/watch?v=oWEVGMPXMbA";

      if video
        meta(property="og:video", content=video)

      meta(property="twitter:title", content=striptags(convert(meta.title)))
      meta(
        property="twitter:description",
        content=striptags(convert(meta.description))
      )
      meta(property="twitter:image", content=ogImage)
      if ctx.pathWithoutLocale !== '/' && ctx.pathWithoutLocale !== '/private-business-email' && !Object.keys(useCases).includes(ctx.pathWithoutLocale) && isNotPrivateRoute
        meta(name="twitter:label1", content=t("Written by"))
        meta(name="twitter:data1", content=config.appName + " " + t("Team"))
        meta(name="twitter:label2", content=t("Time to read"))
        meta(name="twitter:data2", content=t("Less than 5 minutes"))

    //- prefetch fonts
    //- https://caniuse.com/link-rel-prefetch
    //- integrity attribute not currently supported
    //- <https://crbug.com/981419>
    //-.
    - const fonts = ["fa-solid-900.woff2", "fa-brands-400.woff2"];
    if !isBot(ctx.get('User-Agent'))
      - fonts.push("nunito-sans-latin-400.woff2");
      - fonts.push("nunito-sans-latin-700.woff2");
      - fonts.push("vc-honey-latin-400.woff2");
      - fonts.push("vc-honey-latin-700.woff2");
    each font in fonts
      link(
        rel="prefetch",
        href=manifest(`fonts/${font}`),
        type="font/woff2",
        as="font",
        crossorigin="anonymous"
      )

    //- css file
    block stylesheets
      if isBot(ctx.get('User-Agent'))
        if ctx.pathWithoutLocale === '/' && botCss
          style(nonce=nonce)!= botCss
          link(
            rel="prefetch",
            href=manifest("css/app-bot.css"),
            integrity=manifest("css/app-bot.css", "integrity"),
            crossorigin="anonymous"
          )
        else
          link(
            rel="stylesheet",
            href=manifest("css/app-bot.css"),
            integrity=manifest("css/app-bot.css", "integrity"),
            fetchpriority="high",
            crossorigin="anonymous"
          )
      else
        if isPDF || ctx.path.endsWith(".pdf") || config.env === 'test'
          link(
            rel="stylesheet",
            href=`${config.urls.web}/css/app.css`,
            fetchpriority="high",
            crossorigin="anonymous"
          )
        else
          if ctx.pathWithoutLocale === '/' && appCss
            style(nonce=nonce, data-critical="true")!= appCss
            link(
              rel="prefetch",
              href=manifest("css/app.css"),
              integrity=manifest("css/app.css", "integrity"),
              crossorigin="anonymous"
            )
          else
            link(
              rel="stylesheet",
              href=manifest("css/app.css"),
              integrity=manifest("css/app.css", "integrity"),
              fetchpriority="high",
              crossorigin="anonymous"
            )

    //-.
      script(crossorigin="anonymous", nonce=nonce).
        (function () {
          var script = document.createElement('script');
          script.src = 'https://unpkg.com/web-vitals@3/dist/web-vitals.iife.js';
          script.onload = function () {
            // When loading `web-vitals` using a classic script, all the public
            // methods can be found on the `webVitals` global namespace.
            webVitals.onCLS(console.log);
            webVitals.onFID(console.log);
            webVitals.onLCP(console.log);
          };
          document.head.appendChild(script);
        })();

  body.d-flex.flex-column.min-h-100.app(
    role="document",
    onload=isBot(ctx.get("User-Agent")) ? "if (typeof lazyload === 'function') { lazyload(); }" : false,
    data-ignore-hash-change=ctx.pathWithoutLocale === "/" ? true : false,
    class=(domain && domain.name && config.ubuntuTeamMapping && Object.keys(config.ubuntuTeamMapping).includes(domain.name)) || ["/ubuntu", "/kubuntu", "/lubuntu", "/edubuntu", "/ubuntu-studio"].includes(ctx.pathWithoutLocale) ? "ubuntu-font" : ""
  )
    - const isHelp = ctx.pathWithoutLocale && ctx.pathWithoutLocale === "/help";
    - const isRegisterOrLogin = ctx.pathWithoutLocale && ["/register", config.loginRoute].includes(ctx.pathWithoutLocale);

    //- spinner
    block spinner
      include spinner/spinner
    //- navigation
    block navigation
      include _nav

    //- body
    main.flex-grow-1.d-flex.flex-column.flex-grow-1(role="main")
      block body

    //- footer
    block footer
      include _footer

    //- chat
    if !isBot(ctx.get('User-Agent'))
      a.fixed-bottom.mb-2.mr-2.btn.btn-primary.rounded-lg.text-center.is-bot.no-js.d-print-none(
        href="https://matrix.to/#/#forwardemail:matrix.org",
        target="_blank",
        title=t("Chat with us"),
        rel="noopener noreferrer",
        data-toggle="tooltip",
        data-title=t("Chat with us"),
        data-placement="top",
        style="left: auto"
      )
        i.fa.fa-comment

    //- associate with wikipedia
    script(type="application/ld+json", nonce=nonce).
      {
        "@context": "http://schema.org",
        "@type": "Organization",
        "url": "https://forwardemail.net",
        "name": "Forward Email",
        "description": "Free open-source email forwarding service for custom domains",
        "keywords": "email forwarding, custom domain email, free email forwarding, open source email",
        "alternateName": "ForwardEmail",
        "foundingDate": "2017",
        "founders": [
          {
            "@type": "Person",
            "name": "Forward Email Team"
          }
        ],
        "legalName": "Forward Email",
        "logo": "https://forwardemail.net/img/social.png",
        "sameAs": ["https://en.wikipedia.org/wiki/Forward_Email"]
      }

    //- scripts
    //- prettier-ignore
    block scripts
      if !isBot(ctx.get('User-Agent'))
        //- flash messaging (with koa-better-flash and sweetalert2)
        script(defer, nonce=nonce).
          window._types = {
            success: "#{ t('Success') }",
            error: "#{ t('Error') }",
            info: "#{ t('Info') }",
            warning: "#{ t('Warning') }",
            question: "#{ t('Question') }"
          };
        script(defer, nonce=nonce, data-ignore-hash-change)#flash-messages.
          window._messages = !{json(flash(), null, null)};

        //- set defaults for sweetalert2
        //- <https://github.com/limonte/sweetalert2/issues/763>
        script(defer, nonce=nonce).
          window._swalDefaults = {
            confirmButtonText: "#{ t('OK') }",
            cancelButtonText: "#{ t('Cancel') }",
            closeButtonAriaLabel: "#{ t('Close this dialog') }",
            reverseButtons: true,
          };

        //- set defaults for confirm prompt sweetalert2 modal
        script(defer, nonce=nonce).
          window._confirmPromptTitle = "#{ t('Are you sure?') }";
          window._confirmPromptHTML = "#{ t('Please confirm if you wish to continue.') }";

        //- set the locale to be used by front-end assets
        script(defer, nonce=nonce).
          window.LOCALE = "#{locale}";

        //- set the API endpoint to be used by front-end assets
        script(defer, nonce=nonce).
          window.API_URL = "#{config.urls.api}";

      //- set the user and API key to be used by CabinJS
      if config.env !== 'test' && !isBot(ctx.get('User-Agent'))
        //- set the user and API key to be used by CabinJS
        if user
          script(defer, nonce=nonce).
            window.USER = {
              id: "#{user.id}",
              name: "#{user[config.passport.fields.displayName]}",
              email: "#{user.email}",
            };
            window.API_TOKEN = "#{user[config.userFields.apiToken]}";
        else if ctx.sessionId
          script(defer, nonce=nonce).
            window.USER = {
              id: "#{ctx.sessionId}",
            };

      if isBot(ctx.get('User-Agent'))
        //- lazyload only support for bots
        if config.env === 'test'
          script(
            defer,
            src=`${config.urls.web}/js/lazyload.js`,
            crossorigin="anonymous"
          )
        else
          script(
            defer,
            src=manifest("js/lazyload.js"),
            integrity=manifest("js/lazyload.js", "integrity"),
            crossorigin="anonymous"
          )
      else
        //- build
        if config.env === 'test'
          script(
            defer,
            src=`${config.urls.web}/js/build.js`,
            crossorigin="anonymous",
            fetchpriority="low"
          )
        else
          script(
            defer,
            src=manifest("js/build.js"),
            integrity=manifest("js/build.js", "integrity"),
            crossorigin="anonymous",
            fetchpriority="low"
          )

        //- cloudflare turnstile (hidden from bots and admins)
        if config.turnstileEnabled && (!user || user.group !== 'admin')
          script(defer, nonce=nonce).
            window.TURNSTILE_RENDER_ERROR = "#{ t('Turnstile render error, please try again or contact us.') }";
            window.TURNSTILE_SITE_KEY = "#{ config.turnstileSiteKey }";
          script(defer, src='https://challenges.cloudflare.com/turnstile/v0/api.js?onload=onloadTurnstileCallback')
