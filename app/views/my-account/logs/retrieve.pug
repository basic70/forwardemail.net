extends ../../layout

block body
  .container-fluid.pt-3
    .row
      .col
        include ../../_breadcrumbs
  .container-fluid
    .row
      .col
        if log.email
          ul.list-inline.text-center
            li.list-inline-item
              a.btn.btn-primary(
                href=l(`/my-account/emails/${log.email.toString()}`),
                target="_blank"
              )
                = " "
                = t("View Email")
        h3.h5= t("SMTP Envelope")
        table.table.table-hover.table-bordered.table-striped
          if log.meta && log.meta.session && log.meta.session.remoteAddress
            tr
              th= t("Client IP")
              td= log.meta.session.remoteAddress
          if log.meta && log.meta.session && log.meta.session.resolvedClientHostname
            tr
              th= t("Client Hostname")
              td= log.meta.session.resolvedClientHostname
          tr
            th!= t("Date &amp; Time")
            td
              if log.meta && log.meta.session && log.meta.session.arrivalDate
                span.dayjs(data-time=log.meta.session.arrivalTime)= dayjs(log.meta.session.arrivalDate).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
              else
                span.dayjs(data-time=log.created_at)= dayjs(log.created_at).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
          if log.meta.session.envelope.mailFrom && log.meta.session.envelope.mailFrom.address && isSANB(log.meta.session.envelope.mailFrom.address)
            tr
              th= "MAIL FROM"
              td
                = log.meta.session.envelope.mailFrom.address
          tr
            th= "RCPT TO"
            td
              ul.list-inline.mb-0
                each rcpt in log.meta.session.envelope.rcptTo
                  li.list-inline-item= rcpt.address
        h3.h5
          if log.err && log.err.response && isSANB(log.response)
            = t("SMTP Response")
          else
            = t("Log Message")
        - let badgeClass = "badge-success";
        - let statusCode;
        if log.err && log.err.responseCode
          - statusCode = log.err.responseCode;
        else if log.err && log.err.statusCode
          - statusCode = log.err.statusCode;
        else if log.err && log.err.status
          - statusCode = log.err.status;
        else if log.message === 'delivered'
          - statusCode = 250;
        //- webhooks have `200` status code
        if log.meta && log.meta.is_webhook && log.meta.is_webhook === true
          - statusCode = 200;

        if statusCode >= 500
          - badgeClass = "badge-danger";
        else if statusCode >= 400
          - badgeClass = "badge-warning";
        else if statusCode >= 300
          - badgeClass = "badge-primary";
        ul.list-inline.alert.alert-secondary
          if statusCode
            li.list-inline-item.d-inline
              span.badge.badge-pill(class=badgeClass)= statusCode
          li.list-inline-item.small.d-inline
            small.text-monospace
              if log.err && log.err.envelope && log.err.envelope.to && typeof log.err.envelope.to === 'string'
                = "("
                = log.err.envelope.to
                = ")"
                = " "
              if log.err && log.err.isCodeBug === true
                = "An unexpected internal server error has occurred"
              else if log.message === "delivered"
                if log.meta && log.meta.info && log.meta.info.pgp === true
                  = "("
                  = t("PGP Encrypted")
                  = ")"
                  = " "
                if log.meta && log.meta.is_webhook && log.meta.is_webhook === true
                  = "("
                  = t("Webhook")
                  = ")"
                  = " "
                //- TODO: log more details from `log.info`, e.g. EHLO etc
                if log.meta && log.meta.info && log.meta.info.response
                  != ansiHTML(log.meta.info.response)
                else
                  != ansiHTML(log.message)
              else
                != log.err && log.err.message ? ansiHTML(log.err.message) : ansiHTML(log.message)
            if log.err && !log.err.isCodeBug && log.err.bounces && log.err.bounces.length > 0
              ul
                each bounce in log.err.bounces
                  li
                    span.badge.badge-dark.mr-1= bounce.address
                    i.fa.fa-angle-right.mr-1
                    if bounce.recipient && bounce.recipient.to
                      if Array.isArray(bounce.recipient.to)
                        each to in bounce.recipient.to
                          span.badge.badge-danger.mr-1= to
                      else
                        span.badge.badge-danger.mr-1= bounce.recipient.to
                    if bounce.err && bounce.err.message
                      span.text-monospace!= ansiHTML(bounce.err.message)

                    br

                    //- status code
                    - let specificStatusCode;
                    - let specificBadgeClass = "badge-success";
                    if bounce.err && bounce.err.statusCode
                      - specificStatusCode = bounce.err.statusCode;
                    else if bounce.err && bounce.err.status
                      - specificStatusCode = bounce.err.status;
                    else if bounce.err && bounce.err.responseCode
                      - specificStatusCode = bounce.err.responseCode;

                    if specificStatusCode
                      if specificStatusCode >= 500
                        - specificBadgeClass = "badge-danger";
                      else if specificStatusCode >= 400
                        - specificBadgeClass = "badge-warning";
                      else if specificStatusCode >= 300
                        - specificBadgeClass = "badge-primary";
                      span.badge.badge-pill.mr-1(class=specificBadgeClass)= specificStatusCode

        if _.isObject(log.meta) && _.isObject(log.meta.session) && _.isObject(log.meta.session.headers) && !_.isEmpty(log.meta.session.headers)
          h3.h5= t("Message Headers")
          table.table.table-hover.table-bordered.table-striped
            each key in Object.keys(log.meta.session.headers)
              tr
                td: strong= key
                td= log.meta.session.headers[key]
