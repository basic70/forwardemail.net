include ../../_sort-header
include ../../_pagination

table.table.table-hover.table-bordered.table-sm
  thead.thead-dark
    tr
      th.text-center.align-middle(scope="col")!= t("Log")
      th.text-center.align-middle(scope="col")= t("Actions")
    tbody
      if logs.length === 0
        tr
          td.alert.alert-info(colspan="2")
            if isSANB(ctx.query.q)
              = t("No logs exist for that search.")
            else
              = t("No error logs have been stored yet.  Please check back later.")
      else
        each log in logs
          tr
            td.align-middle
              ul.list-unstyled.mb-0
                li
                  span.badge.badge-pill.badge-dark= "ID"
                  = " "
                  span.small: code= log.id
                li
                  span.badge.badge-pill.badge-dark= "DATE"
                  = " "
                  span.small.text-monospace
                    if log.meta && log.meta.session && log.meta.session.arrivalDate
                      span.dayjs(
                        data-time=new Date(log.meta.session.arrivalDate).getTime()
                      )= dayjs(log.meta.session.arrivalDate).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
                    else
                      span.dayjs(data-time=new Date(log.created_at).getTime())= dayjs(log.created_at).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
                //- MAIL FROM
                if log.meta && log.meta.session && log.meta.session.envelope && log.meta.session.envelope.mailFrom && log.meta.session.envelope.mailFrom.address
                  li
                    span.badge.badge-pill.badge-dark= "MAIL FROM"
                    = " "
                    span.small: code= log.meta.session.envelope.mailFrom.address
                //- RCPT TO
                if log.meta && log.meta.session && log.meta.session.envelope && log.meta.session.envelope.rcptTo && _.isArray(log.meta.session.envelope.rcptTo) && !_.isEmpty(log.meta.session.envelope.rcptTo)
                  li
                    span.badge.badge-pill.badge-dark= "RCPT TO"
                    = " "
                    ul.list-inline.d-inline-block.mb-0
                      each rcpt in log.meta.session.envelope.rcptTo
                        li.list-inline-item
                          small: code= rcpt.address
                //- From Header
                if log.meta && log.meta.session && log.meta.session.originalFromAddress
                  li
                    span.badge.badge-pill.badge-primary= "FROM"
                    = " "
                    span.small: code= log.meta.session.originalFromAddress
                else if log.meta && log.meta.session && log.meta.session.headers && log.meta.session.headers.From
                  li
                    span.badge.badge-pill.badge-primary= "FROM"
                    = " "
                    span.small: code= log.meta.session.headers.From
                //- Subject Header
                if log.meta && log.meta.session && log.meta.session.headers && log.meta.session.headers.Subject
                  li
                    span.badge.badge-pill.badge-primary= "SUBJECT"
                    = " "
                    span.small: code= log.meta.session.headers.Subject
                //- Response
                li
                  ul.list-inline.mb-0
                    if log.meta
                      - let badgeClass = "badge-success";
                      - let statusCode;
                      if log.err && log.err.responseCode
                        - statusCode = log.err.responseCode;
                      else if log.err && log.err.statusCode
                        - statusCode = log.err.statusCode;
                      else if log.err && log.err.status
                        - statusCode = log.err.status;
                      else if log.message === 'delivered'
                        - statusCode = 250;
                      //- webhooks have `200` status code
                      if log.meta && log.meta.is_webhook && log.meta.is_webhook === true
                        - statusCode = 200;

                      if statusCode >= 500
                        - badgeClass = "badge-danger";
                      else if statusCode >= 400
                        - badgeClass = "badge-warning";
                      else if statusCode >= 300
                        - badgeClass = "badge-primary";
                      if statusCode
                        li.list-inline-item.d-inline
                          span.badge.badge-pill(class=badgeClass)= statusCode
                    li.list-inline-item.small.d-inline
                      small.text-monospace
                        if log.err && log.err.envelope && log.err.envelope.to && typeof log.err.envelope.to === 'string'
                          = "("
                          = log.err.envelope.to
                          = ")"
                          = " "
                        if log.err && log.err.isCodeBug === true
                          = "An unexpected internal server error has occurred"
                        else if log.message === "delivered"
                          if log.meta && log.meta.info && log.meta.info.pgp === true
                            = "("
                            = t("PGP Encrypted")
                            = ")"
                            = " "
                          if log.meta && log.meta.is_webhook && log.meta.is_webhook === true
                            = "("
                            = t("Webhook")
                            = ")"
                            = " "
                          //- TODO: log more details from `log.info`, e.g. EHLO etc
                          if log.meta && log.meta.info && log.meta.info.response
                            != ansiHTML(log.meta.info.response)
                          else
                            != ansiHTML(log.message)
                        else
                          != log.err && log.err.message ? ansiHTML(log.err.message) : ansiHTML(log.message)
                      if log.err && !log.err.isCodeBug && log.err.bounces && log.err.bounces.length > 0
                        ul
                          each bounce in log.err.bounces
                            li
                              span.badge.badge-dark.mr-1= bounce.address
                              i.fa.fa-angle-right.mr-1
                              if bounce.recipient && bounce.recipient.to
                                if Array.isArray(bounce.recipient.to)
                                  each to in bounce.recipient.to
                                    span.badge.badge-danger.mr-1= to
                                else
                                  span.badge.badge-danger.mr-1= bounce.recipient.to
                              if bounce.err && bounce.err.message
                                span.text-monospace!= ansiHTML(bounce.err.message)

                              br

                              //- status code
                              - let specificStatusCode;
                              - let specificBadgeClass = "badge-success";
                              if bounce.err && bounce.err.statusCode
                                - specificStatusCode = bounce.err.statusCode;
                              else if bounce.err && bounce.err.status
                                - specificStatusCode = bounce.err.status;
                              else if bounce.err && bounce.err.responseCode
                                - specificStatusCode = bounce.err.responseCode;

                              if specificStatusCode
                                if specificStatusCode >= 500
                                  - specificBadgeClass = "badge-danger";
                                else if specificStatusCode >= 400
                                  - specificBadgeClass = "badge-warning";
                                else if specificStatusCode >= 300
                                  - specificBadgeClass = "badge-primary";
                                span.badge.badge-pill.mr-1(class=specificBadgeClass)= specificStatusCode

                              //- message
                              if bounce.err && bounce.err.original_message
                                span.text-monospace.mr-1= bounce.err.original_message
            td.align-middle.text-center
              ul.list-inline.mb-0
                li.list-inline-item
                  a.btn.btn-dark.btn-sm(
                    href=l(`/my-account/logs/${log.id}`),
                    target="_blank"
                  )
                    = t("View Details")
                if log.email
                  li.list-inline-item
                    a.btn.btn-primary.btn-sm(
                      href=l(`/my-account/emails/${log.email.toString()}`),
                      target="_blank"
                    )
                      = t("View Email")
                if log.err && log.err.name === 'DenylistError'
                  - let href = log.err.message.split("you must visit ")[1];
                  if href
                    - href = href.split(";")[0].trim();
                  if href && href.startsWith('https://forwardemail.net/denylist?q=')
                    li.list-inline-item
                      a.btn.btn-warning.btn-sm(href=href, target="_blank")
                        = t("Request Removal")
+paginate('#table-logs')
