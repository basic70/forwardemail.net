include ../../../_sort-header
include ../../../_pagination

mixin renderProgressBar(domain, alias, isMobile = false)
  if (typeof domain.storage_used === 'number' && typeof domain.storage_used_by_aliases === 'number' && typeof domain.storage_quota === 'number')
    - alias.storage_used = typeof alias.storage_used === "number" ? alias.storage_used : 0;0
    - const storageUsedBySpecificAlias = Math.round((alias.storage_used / domain.storage_quota) * 100);
    - const storageUsedByAliases = Math.round(((domain.storage_used_by_aliases - alias.storage_used) / domain.storage_quota) * 100);
    - const pooledStorageUsed = Math.round(((domain.storage_used - domain.storage_used_by_aliases - alias.storage_used) / domain.storage_quota) * 100);
    - const availableStorage = Math.round(((domain.storage_quota - domain.storage_used) / domain.storage_quota) * 100);

    //- if alias had a specific limit then render that as its own progress bar
    if Number.isFinite(alias.max_quota) && alias.max_quota < domain.storage_quota
      - let aliasPercentage = Math.round((alias.storage_used / alias.max_quota) * 100);
      if alias.storage_used >= alias.max_quota
        - aliasPercentage = 100;
      - let aliasProgressClass = "bg-primary";
      - let aliasTextClass = "text-muted";
      if aliasPercentage >= 80
        - aliasProgressClass = "bg-danger";
        - aliasTextClass = "text-danger";
      else if aliasPercentage >= 60
        - aliasProgressClass = "bg-warning";
        - aliasTextClass = "text-warning";
      .progress.bg-light.border.border-dark
        //- render alias portion
        .progress-bar.min-width-25(
          class=aliasProgressClass,
          data-width=`${aliasPercentage || 1}%`,
          aria-valuenow=aliasPercentage || 1,
          aria-valuemin=0,
          aria-valuemax=100,
          data-toggle="tooltip",
          data-title=t("Storage used by this alias"),
          data-placement="bottom",
          role="button"
        )= `${aliasPercentage === 0 ? "<1%" : aliasPercentage}%`
        //- render remaining portion
        if aliasPercentage !== 100
          .progress-bar.bg-success.min-width-25(
            data-width=`${100 - (aliasPercentage || 1)}%`,
            aria-valuenow=100 - (aliasPercentage || 1),
            aria-valuemin=0,
            aria-valuemax=100,
            data-toggle="tooltip",
            data-title=t("Available storage"),
            data-placement="bottom",
            role="button"
          )= `${100 - aliasPercentage}%`
      ul.list-unstyled.small.mt-1
        li(class=aliasTextClass)
          = bytes(alias.storage_used)
          = " / "
          = bytes(alias.max_quota)
          = " "
          = t("alias quota")

    //- render normal progress bar
    - let percentage = Math.round((domain.storage_used / domain.storage_quota) * 100);
    if domain.storage_used >= domain.storage_quota
      - percentage = 100;
    - let progressClass = "bg-primary";
    - let textClass = "text-muted";
    if (percentage >= 80)
      - progressClass = "bg-danger";
      - textClass = "text-danger";
    else if (percentage >= 60)
      - progressClass = "bg-warning";
      - textClass = "text-warning";
    .progress.bg-light.border.border-dark
      //-
        if domain.storage_used > domain.storage_quota
          .progress-bar.bg-danger.w-100(
            role="progressbar",
            aria-valuenow=100,
            aria-valuemin=0,
            aria-valuemax=100
          )= t("No storage remaining")
        else
      if percentage === 0
        .progress-bar.bg-success.w-100(
          aria-valuenow=100,
          aria-valuemin=0,
          aria-valuemax=100,
          data-toggle="tooltip",
          data-title=t("Available storage"),
          data-placement="bottom",
          role="button"
        )
          = "100%"
          = " "
          = t("Free")
          = " "
          = t("available")
      else
        //- Render Storage Used by Specific Alias
        if alias.storage_used > 0
          .progress-bar.progress-bar-striped.progress-bar-animated.bg-info.min-width-25(
            data-width=`${storageUsedBySpecificAlias || 1}%`,
            aria-valuenow=storageUsedBySpecificAlias || 1,
            aria-valuemin=0,
            aria-valuemax=100,
            data-toggle="tooltip",
            data-title=t("Storage used by this alias"),
            data-placement="bottom",
            role="button"
          )= storageUsedBySpecificAlias === 0 ? "<1%" : `${storageUsedBySpecificAlias}%`

        //- Render Storage Used By Aliases
        if storageUsedByAliases > 0
          .progress-bar.bg-primary.min-width-25(
            data-width=`${storageUsedByAliases}%`,
            aria-valuenow=storageUsedByAliases,
            aria-valuemin=0,
            aria-valuemax=100,
            data-toggle="tooltip",
            data-title=t("Storage used by other aliases"),
            data-placement="bottom",
            role="button"
          )= `${storageUsedByAliases}%`

        //- Render Pooled Storage Used
        if pooledStorageUsed > 0
          .progress-bar.min-width-25(
            class=progressClass,
            data-width=`${pooledStorageUsed}%`,
            aria-valuenow=pooledStorageUsed,
            aria-valuemin=0,
            aria-valuemax=100,
            data-toggle="tooltip",
            data-title=t("Storage used by other domains"),
            data-placement="bottom",
            role="button"
          )= `${pooledStorageUsed}%`

        //- Render Available Storage
        if availableStorage > 0
          .progress-bar.bg-success.min-width-25(
            data-width=`${availableStorage}%`,
            aria-valuenow=availableStorage,
            aria-valuemin=0,
            aria-valuemax=100,
            data-toggle="tooltip",
            data-title=t("Available storage"),
            data-placement="bottom",
            role="button"
          )= `${availableStorage}%`
    ul.list-unstyled.small.mt-1.mb-0
      if alias.storage_used > 0
        li.text-info
          = bytes(alias.storage_used)
          = " "
          = t("alias")
      if storageUsedByAliases > 0
        li.text-primary
          = bytes(domain.storage_used_by_aliases - alias.storage_used)
          = " "
          = t("domain")
      if pooledStorageUsed > 0
        li(class=textClass)
          = bytes(domain.storage_used)
          = " "
          = t("pooled")
      if availableStorage > 0
        li.text-success
          = bytes(domain.storage_quota - domain.storage_used)
          = " "
          = t("available")
  else
    = t("Not Available")

- const isUbuntuRelatedAlias = domain && domain.plan === "team" && domain.has_txt_record && config.ubuntuTeamMapping && Object.keys(config.ubuntuTeamMapping).includes(domain.name);

p.text-center.d-lg-none
  a.btn.btn-link.btn-sm(
    href=l("/blog/docs/best-quantum-safe-encrypted-email-service"),
    role="button",
    data-toggle="modal",
    data-target="#modal-storage"
  )
    = "Click here to learn about storage"
    = " "
    i.fa.fa-info-circle

.table-responsive
  table.table.table-hover.table-bordered.table-sm
    thead.thead-dark
      tr
        th(scope="col")
          +sortHeader('name', 'Alias', '#table-aliases')
        th.d-none.d-lg-table-cell(scope="col")
          +sortHeader('description', 'Description', '#table-aliases')
        th.text-center.d-none.d-lg-table-cell(scope="col")
          +sortHeader('is_enabled', 'Active', '#table-aliases')
        if !isUbuntuRelatedAlias || domain.group === 'admin'
          th.align-middle.d-none.d-lg-table-cell.text-nowrap.text-center(
            scope="col"
          )
            span.ml-3= t("Storage Usage")
            a.btn.btn-link.text-uppercase.text-white(
              href=l("/blog/docs/best-quantum-safe-encrypted-email-service"),
              role="button",
              data-toggle="modal",
              data-target="#modal-storage"
            )
              i.fa.fa-info-circle
        th.align-middle.d-none.d-lg-table-cell(scope="col")= t("Recipients")
        th.text-center.text-md-left.align-middle.d-none.d-lg-table-cell(
          scope="col"
        )= t("Quick Links")
    tbody
      if domain && domain.aliases && (domain.aliases.length === 0 || (isSANB(ctx.query.q) && !domain.aliases.find(a => a.name === ctx.query.q.split('@')[0].toLowerCase().trim() || a.recipients.find(r => r === ctx.query.q.toLowerCase().trim()))))
        tr
          td(
            colspan=6 - (!isUbuntuRelatedAlias || domain.group === "admin" ? 0 : 1)
          )
            .alert.alert-warning.mb-0.text-center
              ul.list-inline.mb-0
                - const str = striptags(ctx.query.q).split("@")[0].toLowerCase().trim();
                li.list-inline-item!= t('No results were found for "<span class="notranslate">%s</span>".', str)
                li.list-inline-item
                  form.ajax-form.mb-0(
                    action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/new`),
                    method="POST"
                  )
                    input(type="hidden", name="name", value=str)
                    input(type="hidden", name="is_enabled", value="true")
                    input(type="hidden", name="recipients", value=user.email)
                    button.btn.btn-success.font-weight-bold.text-uppercase(
                      type="submit"
                    )
                      i.fas.fa-bolt.align-middle
                      = " "
                      = t("Instantly create alias")
      if domain && domain.aliases && domain.aliases.length > 0
        each alias in domain.aliases
          tr
            td.align-middle
              //- Download Backup
              .modal.fade(
                id=`modal-download-backup-${alias.id}`,
                tabindex="-1",
                role="dialog",
                aria-labelledby=`modal-download-backup-${alias.id}-title`,
                aria-hidden="true"
              )
                .modal-dialog(role="document")
                  .modal-content
                    .modal-header.text-center.d-block
                      h4.d-inline-block.ml-4(
                        id=`modal-download-backup-${alias.id}-title`
                      )= t("Download Backup")
                      button.close(
                        type="button",
                        data-dismiss="modal",
                        aria-label="Close"
                      )
                        span(aria-hidden="true") &times;
                    .modal-body.text-center
                      form.ajax-form.d-block.confirm-prompt(
                        action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}/download-backup`),
                        method="POST"
                      )
                        p.font-weight-bold.lead= t("Select backup format:")
                        .form-group
                          .form-check
                            input#input-radio-eml.form-check-input(
                              type="radio",
                              required,
                              checked,
                              name="format",
                              value="eml"
                            )
                            label.form-check-label(for="input-radio-eml")= t("EML")
                          .form-check
                            input#input-radio-mbox.form-check-input(
                              type="radio",
                              required,
                              name="format",
                              value="mbox"
                            )
                            label.form-check-label(for="input-radio-eml")= t("MBOX")
                          .form-check
                            input#input-radio-sqlite.form-check-input(
                              type="radio",
                              required,
                              name="format",
                              value="sqlite"
                            )
                            label.form-check-label(for="input-radio-sqlite")
                              = t("SQLite")
                              = " "
                              = "("
                              = t("Advanced Users")
                              = ")"
                            .small.help-text.text-muted
                              = t("Note that after downloading this SQLite file, you will need to download and install this open-source software to decrypt and open it:")
                              = " "
                              a.alert-link(
                                href="https://github.com/pawelsalawa/sqlitestudio",
                                target="_blank"
                              )= "SQLiteStudio"
                              = " "
                              != t('After opening SQLiteStudio, you must select <span class="notranslate">"WxSQLite3"</span> as the database type and use <span class="notranslate">"sqleet"</span> cipher to decrypt it using your password.')
                        p.font-weight-bold.lead= t("Enter current password to get a new backup:")
                        .form-group.floating-label
                          input.form-control.form-control-lg(
                            id=`input-backup-password-${alias.id}`,
                            name="password",
                            required=!_.isDate(alias.imap_backup_at),
                            type="password",
                            placeholder=" ",
                            autocomplete=config.env === "test" ? "off" : randomstring()
                          )
                          label(for=`input-backup-password-${alias.id}`)= t("Password")
                        if _.isDate(alias.imap_backup_at)
                          p.alert.alert-primary.small
                            = emoji("point_up")
                            = " "
                            != t("Leave blank to download <strong>SQLite</strong> backup on")
                            = " "
                            span.dayjs.font-weight-bold(
                              data-time=new Date(alias.imap_backup_at).getTime()
                            )= dayjs(alias.imap_backup_at).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
                        if config.turnstileEnabled
                          noscript
                            .alert.alert-danger.font-weight-bold.text-center.border-top-0.border-left-0.border-right-0.rounded-0.small!= t("Please enable JavaScript to use our website.")
                          .cf-explicit-turnstile
                        button.btn.btn-success.btn-block.btn-lg(type="submit")= t("Continue")

              //- Download QR Code
              if !domain.is_global && alias.name !== '*' && !alias.name.startsWith('/') && domain.plan !== 'free'
                .modal.fade(
                  id=`modal-qrcode-${alias.id}`,
                  tabindex="-1",
                  role="dialog",
                  aria-labelledby=`modal-qrcode-${alias.id}-title`,
                  aria-hidden="true"
                )
                  .modal-dialog.modal-lg(role="document")
                    .modal-content
                      .modal-header.text-center.d-block
                        h4.d-inline-block.ml-4(id=`modal-qrcode-${alias.id}-title`)= t("Get QR Code for Device Provisioning")
                        button.close(
                          type="button",
                          data-dismiss="modal",
                          aria-label="Close"
                        )
                          span(aria-hidden="true") &times;
                      .modal-body.text-center
                        form.ajax-form.d-block.confirm-prompt(
                          action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}/qrcode`),
                          method="POST"
                        )
                          p.alert.alert-primary.small
                            = t("Enter the alias' password to get a scannable QR code for provisioning your Apple and Android devices.")
                          p.font-weight-bold.lead= t("Enter current password")
                          .form-group.floating-label
                            input.form-control.form-control-lg(
                              id=`input-password-${alias.id}`,
                              name="password",
                              type="password",
                              placeholder=" ",
                              autocomplete=config.env === "test" ? "off" : randomstring()
                            )
                            label(for=`input-password-${alias.id}`)= t("Password")
                          if config.turnstileEnabled
                            noscript
                              .alert.alert-danger.font-weight-bold.text-center.border-top-0.border-left-0.border-right-0.rounded-0.small!= t("Please enable JavaScript to use our website.")
                            .cf-explicit-turnstile
                          button.btn.btn-success.btn-block.btn-lg(
                            type="submit"
                          )= t("Continue")

              //- Generate Password
              if !domain.is_global && alias.name !== '*' && !alias.name.startsWith('/') && domain.plan !== 'free'
                .modal.fade(
                  id=`modal-generate-password-${alias.id}`,
                  tabindex="-1",
                  role="dialog",
                  aria-labelledby=`modal-generate-password-${alias.id}-title`,
                  aria-hidden="true"
                )
                  .modal-dialog.modal-lg(role="document")
                    .modal-content
                      .modal-header.text-center.d-block
                        h4.d-inline-block.ml-4(
                          id=`modal-generate-password-${alias.id}-title`
                        )= t("Generate Password")
                        button.close(
                          type="button",
                          data-dismiss="modal",
                          aria-label="Close"
                        )
                          span(aria-hidden="true") &times;
                      .modal-body.text-center
                        form.ajax-form.d-block.confirm-prompt(
                          action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}/generate-password`),
                          method="POST"
                        )
                          if Array.isArray(alias.tokens) && alias.tokens.length > 0
                            p.alert.alert-warning.small
                              i.fa.fa-exclamation-circle.font-weight-bold
                              = " "
                              != t("<strong>Warning:</strong> This removes the current password for this alias.")
                          p.font-weight-bold.lead= t("Need to email instructions to someone?")
                          .form-group.floating-label
                            input.form-control.form-control-lg(
                              id=`input-emailed-instructions-${alias.id}`,
                              type="email",
                              autocomplete=config.env === "test" ? "off" : randomstring(),
                              name="emailed_instructions",
                              placeholder="name@example.com"
                            )
                            label(for=`input-emailed-instructions-${alias.id}`)= t("Email address")
                          p.alert.alert-primary.small
                            = emoji("point_up")
                            = " "
                            = t("Leave blank to get password instantly.")
                          p.font-weight-bold.lead= t("Enter a strong new password:")
                          .form-group.floating-label
                            input.form-control.form-control-lg(
                              id=`input-new-password-${alias.id}`,
                              name="new_password",
                              type="password",
                              placeholder=" ",
                              autocomplete=config.env === "test" ? "off" : randomstring()
                            )
                            label(for=`input-new-password-${alias.id}`)= t("New Password")
                          p.alert.alert-primary.small
                            = emoji("point_up")
                            = " "
                            = t("Leave blank to use our strong and random 24-character password generator.")
                          if Array.isArray(alias.tokens) && alias.tokens.length > 0
                            p.font-weight-bold.lead= t("Enter current password to keep existing mailbox and messages:")
                            .form-group.floating-label
                              input.form-control.form-control-lg(
                                id=`input-password-${alias.id}`,
                                name="password",
                                type="password",
                                placeholder=" ",
                                autocomplete=config.env === "test" ? "off" : randomstring()
                              )
                              label(for=`input-password-${alias.id}`)= t("Password")
                            p.alert.alert-primary.small
                              = emoji("point_up")
                              = " "
                              != t('This will <a href="%s" class="alert-link" target="_blank">re-encrypt your mailbox</a> with a new password.', l("/blog/docs/best-quantum-safe-encrypted-email-service"))
                            .alert.alert-danger
                              .form-check.text-left.small
                                input.form-check-input(
                                  id=`input-is-override-${alias.id}`,
                                  type="checkbox",
                                  name="is_override",
                                  value="true"
                                )
                                label.form-check-label(
                                  for=`input-is-override-${alias.id}`
                                )
                                  != t("Don't remember your current password? If you check this, then we'll delete the entire mailbox and all messages for this alias. <strong>We recommend that you download the latest backup before proceeding.</strong>")
                          if config.turnstileEnabled
                            noscript
                              .alert.alert-danger.font-weight-bold.text-center.border-top-0.border-left-0.border-right-0.rounded-0.small!= t("Please enable JavaScript to use our website.")
                            .cf-explicit-turnstile
                          button.btn.btn-success.btn-block.btn-lg(
                            type="submit"
                          )= t("Continue")
              p.mb-0.markdown-body.ml-0.mr-0
                button.btn.btn-sm.btn-link.d-lg-none(
                  type="button",
                  data-placement="bottom",
                  data-toggle="tooltip",
                  data-title=alias.is_enabled ? t("Enabled") : t("Disabled"),
                  class=alias.is_enabled ? "text-success" : "text-danger"
                )
                  i.fa.fa-fw(class=alias.is_enabled ? "fa-check" : "fa-times")
                if alias.name.length >= 20
                  code.text-break= `${alias.name}@${domain.name}`
                else
                  code= `${alias.name}@${domain.name}`
              //- vacation responder support
              if alias.vacation_responder && alias.vacation_responder.is_enabled
                span.badge.badge-warning
                  i.fa.fa-calendar-day
                  = " "
                  = t("Vacation Responder")
                  if _.isDate(alias.vacation_responder.start_date)
                    = " "
                    = "("
                    span.dayjs(
                      data-time=new Date(alias.vacation_responder.start_date).getTime(),
                      data-time-style="false"
                    )= dayjs(alias.vacation_responder.start_date).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY")
                  if _.isDate(alias.vacation_responder.end_date)
                    if _.isDate(alias.vacation_responder.start_date)
                      != " &ndash; "
                    else
                      = " "
                      = "("
                      = t("Now")
                      != " &ndash; "
                    span.dayjs(
                      data-time=new Date(alias.vacation_responder.end_date).getTime(),
                      data-time-style="false"
                    )= dayjs(alias.vacation_responder.end_date).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY")
                    = ")"
                  else
                    != " &ndash; "
                    = t("Forever")
                    if _.isDate(alias.vacation_responder.start_date)
                      = ")"
              //- on mobile we need to render this different
              .d-lg-none.p-2
                if !isUbuntuRelatedAlias || domain.group === 'admin'
                  .small
                    +renderProgressBar(domain, alias, true)
                if domain && domain.aliases && domain.aliases.find(alias => isSANB(alias.description) || (_.isArray(alias.labels) && alias.labels.length > 0))
                  if isSANB(alias.description)
                    p.mb-1.small= alias.description
                  if Array.isArray(alias.labels)
                    ul.list-inline.mb-1
                      each label in alias.labels
                        li.list-inline-item
                          span.badge.text-monospace.font-weight-normal(
                            class=label === "catch-all" ? "badge-success" : "badge-primary"
                          )= label === "catch-all" ? t("catch-all") : label
                  if domain.group === 'admin' && domain.plan === 'team'
                    p.mb-1.small.text-muted.text-nowrap
                      small
                        i.fa.fa-user
                        = " "
                        = alias.user.email
                p.font-weight-bold.small.mb-1
                  = t("Recipients")
                  = ":"
                ul.list-inline.mb-1
                  if alias.name !== '*' && !alias.name.startsWith('/') && (!isUbuntuRelatedAlias || domain.group === 'admin')
                    li.list-inline-item
                      span.badge.text-nowrap.text-uppercase(
                        class=alias.has_imap ? "badge-success" : "badge-secondary"
                      )
                        i.fa(class=alias.has_imap ? "fa-check-circle" : "fa-times")
                        = " "
                        = "IMAP/POP3/CalDAV/CardDAV"
                      = " "
                      a.badge.badge-primary.text-uppercase.text-nowrap(
                        href=l("/blog/docs/best-quantum-safe-encrypted-email-service"),
                        target="_blank",
                        role="button",
                        data-toggle="modal",
                        data-target="#modal-storage"
                      )
                        i.fa.fa-info-circle
                        = " "
                        = t("Learn more")
                  //- no recipient verification required
                  if domain.plan === 'free' || !alias.has_recipient_verification
                    each recipient in alias.recipients
                      li.list-inline-item.markdown-body
                        code.badge.badge-dark.text-monospace.font-weight-normal(
                          class=isURL(recipient) ? "" : "text-nowrap"
                        )
                          if isEmail(recipient) || isURL(recipient)
                            = recipient
                          else
                            = `${alias.name}@${recipient}`
                  else
                    each recipient in alias.recipients
                      li.list-inline-item.badge.badge-dark.text-monospace.font-weight-normal.mb-1.markdown-body
                        if alias.verified_recipients.includes(recipient)
                          //- Verified
                          button.btn.btn-sm.btn-link.text-success(
                            type="button",
                            data-placement="bottom",
                            data-toggle="tooltip",
                            data-title=t("Verified")
                          )
                            i.fa.fa-fw.fa-check
                        else if alias.pending_recipients.includes(recipient)
                          //- Sent and Pending
                          button.btn.btn-sm.btn-link.text-primary(
                            type="button",
                            data-placement="bottom",
                            data-toggle="tooltip",
                            data-title=t("Pending Verification")
                          )
                            i.fa.fa-fw.fa-info-circle
                        else
                          //- Not Sent (Queued)
                          button.btn.btn-sm.btn-link.text-warning(
                            type="button",
                            data-placement="bottom",
                            data-toggle="tooltip",
                            data-title=t("Queued Verification Email")
                          )
                            i.fa.fa-fw.fa-exclamation-circle
                        if isEmail(recipient) || isURL(recipient)
                          code(class=isURL(recipient) ? "" : "text-nowrap")= recipient
                        else
                          code.text-nowrap= `${alias.name}@${recipient}`
                        if !alias.verified_recipients.includes(recipient) && alias.pending_recipients.includes(recipient)
                          //- Button to resend verification email
                          form.ajax-form.confirm-prompt.d-inline-block(
                            action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}/resend-verification`),
                            method="POST",
                            data-confirm-prompt-title=t("Resend verification email?"),
                            data-confirm-prompt-html=t("Please confirm if you wish to resend the verification email to <strong>%s</strong>.", recipient)
                          )
                            input(
                              type="hidden",
                              name="recipient",
                              value=recipient
                            )
                            button.btn.btn-sm.btn-link.text-warning(
                              data-placement="bottom",
                              data-toggle="tooltip",
                              data-title=t("Resend verification email")
                            )
                              i.fa.fa-fw.fa-refresh

                ul.list-inline.mb-0
                  li.list-inline-item
                    a.btn.btn-sm.btn-link.text-themed.btn-block(
                      href=`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}`
                    )
                      i.fa.fa-pencil
                      = " "
                      = t("Edit")
                  if !isUbuntuRelatedAlias || domain.group === 'admin'
                    li.list-inline-item
                      form.ajax-form.confirm-prompt.d-block(
                        action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}`),
                        method="POST"
                      )
                        input(type="hidden", name="_method", value="DELETE")
                        button.btn.btn-sm.btn-link.text-danger.btn-block(
                          type="submit"
                        )
                          i.fa.fa-trash
                          = " "
                          = t("Delete")
                  //- if it was not a global domain and it was a catch-all or regex
                  //- then divert users to advanced settings #domain-tokens section
                  if domain.group === 'admin' && !domain.is_global && alias.name === '*' && domain.plan !== 'free'
                    li.list-inline-item
                      a.btn.btn-sm.btn-link.text-success.btn-block(
                        href=l(`/my-account/domains/${punycode.toASCII(domain.name)}/advanced-settings#catch-all-passwords`),
                        role="button",
                        data-toggle="modal",
                        data-target="#modal-domain-tokens"
                      )
                        i.fa.fa-key
                        = " "
                        = t("Catch-all Passwords")
                  //- generate password for alias, setup instructions, download backup
                  if !domain.is_global && alias.name !== '*' && !alias.name.startsWith('/') && domain.plan !== 'free'
                    li.list-inline-item
                      button.btn.btn-sm.btn-link.text-success.btn-block(
                        type="button",
                        data-toggle="modal",
                        data-target=`#modal-generate-password-${alias.id}`
                      )
                        i.fa.fa-key
                        = " "
                        = t("Generate Password")
                    li.list-inline-item
                      button.btn.btn-sm.btn-link.text-themed.btn-block(
                        type="button",
                        data-toggle="modal",
                        data-target=`#modal-qrcode-${alias.id}`
                      )
                        i.fas.fa-qrcode
                        = " "
                        = t("Get QR Code")
                    li.list-inline-item
                      button.btn.btn-sm.btn-link.text-themed.btn-block(
                        type="button",
                        data-toggle="modal",
                        data-target="#modal-setup-instructions"
                      )
                        i.fa.fa-list-ol
                        = " "
                        = t("Setup Instructions")
                    if Array.isArray(alias.tokens) && alias.tokens.length > 0
                      li.list-inline-item
                        button.btn.btn-sm.btn-link.text-themed.btn-block(
                          type="button",
                          data-toggle="modal",
                          data-target=`#modal-download-backup-${alias.id}`
                        )
                          i.fa.fa-database
                          = " "
                          = t("Download Backup")

            td.align-middle.d-none.d-lg-table-cell
              if isSANB(alias.description)
                p.mb-0.small= alias.description
              if Array.isArray(alias.labels)
                ul.list-inline.mb-0
                  each label in alias.labels
                    li.list-inline-item
                      span.badge.text-monospace.font-weight-normal(
                        class=label === "catch-all" ? "badge-success" : "badge-primary"
                      )= label === "catch-all" ? t("catch-all") : label
              if domain.group === 'admin' && domain.plan === 'team'
                .small.text-muted.text-nowrap
                  small
                    i.fa.fa-user
                    = " "
                    = alias.user.email

            td.align-middle.text-center.d-none.d-lg-table-cell
              button.btn.btn-sm.btn-link(
                type="button",
                data-placement="bottom",
                data-toggle="tooltip",
                data-title=alias.is_enabled ? t("Enabled") : t("Disabled"),
                class=alias.is_enabled ? "text-success" : "text-danger"
              )
                i.fa.fa-fw(class=alias.is_enabled ? "fa-check" : "fa-times")
            if !isUbuntuRelatedAlias || domain.group === 'admin'
              td.align-middle.p-3.small.d-none.d-lg-table-cell.text-center
                +renderProgressBar(domain, alias)
            td.align-middle.d-none.d-lg-table-cell
              ul.list-inline.mb-0
                if alias.name !== '*' && !alias.name.startsWith('/') && (!isUbuntuRelatedAlias || domain.group === 'admin')
                  li.list-inline-item
                    span.badge.text-nowrap.text-uppercase(
                      class=alias.has_imap ? "badge-success" : "badge-secondary"
                    )
                      i.fa(class=alias.has_imap ? "fa-check-circle" : "fa-times")
                      = " "
                      = "IMAP/POP3/CalDAV/CardDAV"
                    = " "
                    a.badge.badge-primary.text-uppercase.text-nowrap(
                      href=l("/blog/docs/best-quantum-safe-encrypted-email-service"),
                      target="_blank",
                      role="button",
                      data-toggle="modal",
                      data-target="#modal-storage"
                    )
                      i.fa.fa-info-circle
                      = " "
                      = t("Learn more")
                //- no recipient verification required
                if domain.plan === 'free' || !alias.has_recipient_verification
                  each recipient in alias.recipients
                    li.list-inline-item.markdown-body
                      code.badge.badge-dark.text-monospace.font-weight-normal(
                        class=isURL(recipient) ? "" : "text-nowrap"
                      )
                        if isEmail(recipient) || isURL(recipient)
                          = recipient
                        else
                          = `${alias.name}@${recipient}`
                else
                  each recipient in alias.recipients
                    li.list-inline-item.badge.badge-dark.text-monospace.font-weight-normal.mb-1.markdown-body
                      if alias.verified_recipients.includes(recipient)
                        //- Verified
                        button.btn.btn-sm.btn-link.text-success(
                          type="button",
                          data-placement="bottom",
                          data-toggle="tooltip",
                          data-title=t("Verified")
                        )
                          i.fa.fa-fw.fa-check
                      else if alias.pending_recipients.includes(recipient)
                        //- Sent and Pending
                        button.btn.btn-sm.btn-link.text-primary(
                          type="button",
                          data-placement="bottom",
                          data-toggle="tooltip",
                          data-title=t("Pending Verification")
                        )
                          i.fa.fa-fw.fa-info-circle
                      else
                        //- Not Sent (Queued)
                        button.btn.btn-sm.btn-link.text-warning(
                          type="button",
                          data-placement="bottom",
                          data-toggle="tooltip",
                          data-title=t("Queued Verification Email")
                        )
                          i.fa.fa-fw.fa-exclamation-circle
                      if isEmail(recipient) || isURL(recipient)
                        code(class=isURL(recipient) ? "" : "text-nowrap")= recipient
                      else
                        code.text-nowrap= `${alias.name}@${recipient}`
                      if !alias.verified_recipients.includes(recipient) && alias.pending_recipients.includes(recipient)
                        //- Button to resend verification email
                        form.ajax-form.confirm-prompt.d-inline-block(
                          action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}/resend-verification`),
                          method="POST",
                          data-confirm-prompt-title=t("Resend verification email?"),
                          data-confirm-prompt-html=t("Please confirm if you wish to resend the verification email to <strong>%s</strong>.", recipient)
                        )
                          input(
                            type="hidden",
                            name="recipient",
                            value=recipient
                          )
                          button.btn.btn-sm.btn-link.text-primary(
                            data-placement="bottom",
                            data-toggle="tooltip",
                            data-title=t("Resend verification email")
                          )
                            i.fa.fa-fw.fa-refresh
            td.align-middle.d-none.d-lg-table-cell(data-width="20%")
              ul.list-inline.mb-0
                li.list-inline-item
                  a.btn.btn-sm.btn-link.text-themed.btn-block(
                    href=`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}`
                  )
                    i.fa.fa-pencil
                    = " "
                    = t("Edit")
                if !isUbuntuRelatedAlias || domain.group === 'admin'
                  li.list-inline-item
                    form.ajax-form.confirm-prompt.d-block(
                      action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases/${alias.id}`),
                      method="POST"
                    )
                      input(type="hidden", name="_method", value="DELETE")
                      button.btn.btn-sm.btn-link.text-danger.btn-block(
                        type="submit"
                      )
                        i.fa.fa-trash
                        = " "
                        = t("Delete")
                //- if it was not a global domain and it was a catch-all or regex
                //- then divert users to advanced settings #domain-tokens section
                if domain.group === 'admin' && !domain.is_global && alias.name === '*' && domain.plan !== 'free'
                  li.list-inline-item
                    a.btn.btn-sm.btn-link.text-success.btn-block(
                      href=l(`/my-account/domains/${punycode.toASCII(domain.name)}/advanced-settings#catch-all-passwords`),
                      role="button",
                      data-toggle="modal",
                      data-target="#modal-domain-tokens"
                    )
                      i.fa.fa-key
                      = " "
                      = t("Catch-all Passwords")
                //- generate password for alias, setup instructions, download backup
                if !domain.is_global && alias.name !== '*' && !alias.name.startsWith('/') && domain.plan !== 'free'
                  li.list-inline-item
                    button.btn.btn-sm.btn-link.text-success.btn-block(
                      type="button",
                      data-toggle="modal",
                      data-target=`#modal-generate-password-${alias.id}`
                    )
                      i.fa.fa-key
                      = " "
                      = t("Generate Password")
                  li.list-inline-item
                    button.btn.btn-sm.btn-link.text-themed.btn-block(
                      type="button",
                      data-toggle="modal",
                      data-target=`#modal-qrcode-${alias.id}`
                    )
                      i.fas.fa-qrcode
                      = " "
                      = t("Get QR Code")
                  li.list-inline-item
                    button.btn.btn-sm.btn-link.text-themed.btn-block(
                      type="button",
                      data-toggle="modal",
                      data-target="#modal-setup-instructions"
                    )
                      i.fa.fa-list-ol
                      = " "
                      = t("Setup Instructions")
                  if Array.isArray(alias.tokens) && alias.tokens.length > 0
                    li.list-inline-item
                      button.btn.btn-sm.btn-link.text-themed.btn-block(
                        type="button",
                        data-toggle="modal",
                        data-target=`#modal-download-backup-${alias.id}`
                      )
                        i.fa.fa-database
                        = " "
                        = t("Download Backup")

+paginate('#table-aliases')
