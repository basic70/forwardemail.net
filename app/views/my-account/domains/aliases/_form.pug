- const domainQuery = isSANB(ctx.query.domain) && (isIP(ctx.query.domain) || isFQDN(ctx.query.domain)) ? ctx.query.domain : false;
- const isUbuntuAlias = domain && domain.plan === "team" && domain.has_txt_record && config.ubuntuTeamMapping && Object.keys(config.ubuntuTeamMapping).includes(domain.name);
if alias
  input(type="hidden", name="_method", value="PUT")
.form-row
  .form-group(class=domain ? "col" : "col col-md-6")
    label(for="input-alias-name")
      = t("Name")
      = " "
      span.text-danger= t("(required)")
    .input-group
      input#input-alias-name.form-control.border-themed.d-flex(
        required,
        readonly=isUbuntuAlias && domain.group !== "admin",
        value=alias ? alias.name : domain && domain.aliases && domain.aliases.length === 0 && isSANB(ctx.query.q) ? striptags(ctx.query.q).split("@")[0].toLowerCase().trim() : "",
        name="name",
        autocomplete=config.env === "test" ? "off" : randomstring(),
        placeholder="",
        autocorrect="off",
        spellcheck="false",
        autocapitalize="off",
        type="text"
      )
      .input-group-append
        .input-group-text.bg-dark.text-white.border-themed
          if domain
            input(type="hidden", name="domain", required, value=domain.id)
            small= `@${domain.name}`
          else
            small= "@"
    if !domain || !domain.is_global
      .alert.alert-secondary.small.text-center.mt-3
        = t('Use an asterisk "*" for a catch-all alias.')
        if !domain
          = " "
          = t("Catch-all aliases are not supported on vanity and disposable domains that we provide.")
        = " "
        != t('We also support <a href="%s" target="_blank" class="alert-link">regular expressions</a>.', l("/faq#do-you-support-regular-expressions-or-regex"))
    ul.list-inline.text-center.mb-0
      li.list-inline-item
        button.generate-random-alias.btn.btn-primary(
          data-target="#input-alias-name",
          type="button"
        )
          i.fa.fa-dice
          = " "
          = t("Generate random alias")
      if domain
        li.list-inline-item
          button.btn.btn-success(type="submit")
            if alias
              = t("Update Alias")
            else
              = t("Create Alias")
  if !domain
    .form-group.col-md-6
      label(for="select-alias-domain")
        = t("Domain Name")
      .input-group
        select#select-alias-domain.form-control(required, name="domain")
          each domain, i in allDomains || domains
            option(
              value=domain.id,
              selected=domainQuery && domainQuery === domain.name
            )
              = domain.name
              if !domain.plan || domain.plan === 'free'
                = " "
                = "("
                if user.plan === 'free'
                  = t("Upgrade plan")
                else
                  = t("Switch domain plan")
                = ")"
              if domain.is_global
                = " ("
                = t("Vanity Domain")
                = ")"
        .input-group-append
          button.btn.btn-success(type="submit")
            if alias
              = t("Update Alias")
            else
              = t("Create Alias")
      ul.list-inline.form-text
        if user.plan === 'free'
          li.list-inline-item
            a.btn.btn-sm.btn-danger(
              href=domainQuery ? l(`/my-account/domains/${domainQuery}/billing?plan=enhanced_protection`) : l("/my-account/billing/upgrade?plan=enhanced_protection")
            )
              i.fa.fa-angle-double-up
              = " "
              = t("Upgrade plan")
        li.list-inline-item
          a.btn.btn-sm.btn-dark(
            href=l("/my-account/domains/new"),
            role="button",
            data-toggle="modal-anchor",
            data-target="#modal-domain"
          )
            i.fa.fa-plus
            = " "
            = t("Add new domain")
.form-group.form-check
  input#input-is-enabled.form-check-input(
    type="checkbox",
    name="is_enabled",
    value="true",
    checked=alias ? alias.is_enabled : true
  )
  label.form-check-label(for="input-is-enabled")
    = t("Active")
    = " "
    span.text-muted= t("(optional)")
  .alert.alert-warning.small.mt-3
    = t("If you uncheck this, then this email will be deactivated and no emails will flow through.")
if !domain || !domain.is_global && (!isUbuntuAlias || domain.group === 'admin')
  .form-group.form-check
    input#input-has-imap.form-check-input(
      type="checkbox",
      name="has_imap",
      checked=alias ? alias.has_imap : false,
      value="true"
    )
    label.form-check-label(for="input-has-imap")
      = "IMAP/POP3/CalDAV/CardDAV"
      = " "
      span.text-muted= t("(optional)")
  .alert.alert-success
    strong= t("Recommended:")
    = " "
    != t('This will enable <span class="notranslate">IMAP/POP3/CalDAV/CardDAV</span> for this alias.')
    = " "
    = t("You can have this and forwarding recipients enabled at the same time.")
    = " "
    != t('If you would like to learn more about storage, please <a class="alert-link" href="%s" target="_blank">click here to read our deep dive on Encrypted Email.</a>', l("/blog/docs/best-quantum-safe-encrypted-email-service"))

//- if user was admin of the domain then allow them to update storage quota
if domain && domain.group === 'admin'
  .form-group
    label(for="input-max-quota")
      = t("Storage Max Quota")
      = " "
      span.text-muted= t("(optional)")
    input#input-max-quota.form-control(
      type="text",
      name="max_quota",
      value=alias && Number.isFinite(alias.max_quota) ? bytes(alias.max_quota) : ""
    )
    .alert.alert-secondary.small.mt-3
      != t('Domain admins can update the storage quota for this alias.  Leave blank and hit save to reset it to the current domain\'s maximum storage quota of <span class="notranslate">%s</span>.  Enter a human-friendly string such as "1GB" &ndash; note that we use <a href="https://github.com/visionmedia/bytes.js" class="notranslate alert-link" target="_blank" rel="noopener noreferrer">bytes</a> to parse the value to a Number.  If you would like to update the max storage quota across all aliases for this domain, then go to the domain\'s Settings page.', bytes(Number.isFinite(domain.max_quota_per_alias) ? domain.max_quota_per_alias : config.maxQuotaPerAlias))

.form-group
  label(for="textarea-alias-recipients")
    = t("Forwarding Recipients")
    = " "
    span.text-muted= t("(optional)")
  textarea#textarea-alias-recipients.form-control(name="recipients", rows=1)= alias && Array.isArray(alias.recipients) ? alias.recipients.join(", ") : user.email
  .alert.alert-secondary.small.mt-3
    if alias
      = t('Recipients must be a line-break/space/comma separated list of valid email addresses, fully-qualified domain names ("FQDN"), IP addresses, and/or webhook URL\'s.  We will automatically remove duplicate entries for you and perform validation when you click "Update Alias" below.')
    else
      = t('Recipients must be a line-break/space/comma separated list of valid email addresses, fully-qualified domain names ("FQDN"), IP addresses, and/or webhook URL\'s.  We will automatically remove duplicate entries for you and perform validation when you click "Create Alias" below.')
    = " "
    = t("We do not support forwarding recursively more than one level deep. If you forward recursively more than one level deep, then your desired configuration may not work as intended.")
.form-group
  label(for="textarea-alias-description")
    = t("Description")
    = " "
    span.text-muted= "(optional)"
  textarea#textarea-alias-description.form-control(
    name="description",
    maxlength=150,
    rows=1
  )= alias ? alias.description : ""
  .alert.alert-secondary.small.mt-3
    = t("Description has a max of 150 characters.")
.form-group
  label(for="input-alias-labels")
    = t("Labels")
    = " "
    span.text-muted= "(optional; for organization purposes only)"
  textarea#input-alias-labels.form-control(name="labels", rows=1)= alias && Array.isArray(alias.labels) ? _.without(alias.labels, "catch-all").join(", ") : ""
  .alert.alert-secondary.small.mt-3
    = t("Labels must be a line-break/space/comma separated list with a maximum of 20 characters per label.")
if !domain || (domain && !domain.is_global)
  .form-group.form-check
    input#input-has-recipient-verification.form-check-input(
      type="checkbox",
      name="has_recipient_verification",
      value="true",
      checked=alias ? alias.has_recipient_verification : domain && domain.has_recipient_verification
    )
    label.form-check-label(for="input-has-recipient-verification")
      = t("Requires recipients to click email verification link")
      = " "
      span.text-muted= t("(optional)")
    .alert.alert-warning.small.mt-3
      = t("If you check this, then each forwarding recipient will be required to click an email verification link in order for emails to flow through.")
//- error_code_if_disabled
.form-group
  label(for="select-error-code-if-disabled")
    = t("If not active, then this error code will be used:")
  select#select-error-code-if-disabled.form-control(
    name="error_code_if_disabled"
  )
    option(value=250, selected=!alias || alias.error_code_if_disabled === 250)
      = "250"
      = " "
      = t("Quiet reject; routed nowhere (e.g. blackhole)")
    option(value=421, selected=alias && alias.error_code_if_disabled === 421)
      = "421"
      = " "
      = t("Soft reject; retry for approximately 5 days")
    option(value=550, selected=alias && alias.error_code_if_disabled === 550)
      = "550"
      = " "
      = t("Hard reject; permanent failure, (e.g. mailbox does not exist)")
if !domain || !domain.is_global && (!isUbuntuAlias || domain.group === 'admin')
  .form-group.form-check
    input#input-has-pgp.form-check-input(
      type="checkbox",
      name="has_pgp",
      value="true",
      checked=alias ? alias.has_pgp : false
    )
    label.form-check-label(for="input-has-pgp")
      = t("OpenPGP Encryption")
      = " "
      span.text-muted= t("(optional)")
    .alert.alert-warning.small.mt-3
      != t('Our storage is already encrypted using ChaCha20-Poly1305 encryption.  However if you\'d like double the level of encryption, then if you have <span class="notranslate">IMAP/POP3/CalDAV/CardDAV</span> enabled and if you also check this, then all future emails stored will also be encrypted with the public key below.')
      = " "
      != t('If this is checked and no public key is entered below, then we will attempt to perform a lookup <a href="%s" target="_blank" class="alert-link">using Web Key Directory</a> ("WKD").', l("/faq#do-you-support-openpgpmime-end-to-end-encryption-e2ee-and-web-key-directory-wkd"))
  label(for="textarea-public-key")
    = t("OpenPGP Public Key for E2EE")
    = " "
    span.text-muted= t("(optional)")
  .form-group
    textarea#textarea-public-key.form-control(name="public_key", rows=3)= alias && alias.public_key ? alias.public_key : ""
  .alert.alert-secondary.small
    != t('Please enter your optional OpenPGP public key above in ASCII Armor format. This feature enables you to use end-to-end encryption ("E2EE") with <a href="%s" target="_blank" class="alert-link">supported email clients</a> and recipients.', l("/faq#do-you-support-openpgpmime-end-to-end-encryption-e2ee-and-web-key-directory-wkd"))
    = " "
    != t('<strong class="text-decoration-underline">This assumes you have already <a href="%s" target="_blank" class="alert-link">followed our instructions</a></strong> and <a href="https://keys.openpgp.org/upload" target="_blank" class="alert-link">uploaded your public key to the keys.openpgp.org server</a> (or are self-hosting).', l("/faq#do-you-support-openpgpmime-end-to-end-encryption-e2ee-and-web-key-directory-wkd"))
    ul.list-inline.mt-1.mb-0
      li.list-inline-item
        a.btn.btn-success.btn-sm(
          href=l("/faq#do-you-support-openpgpmime-end-to-end-encryption-e2ee-and-web-key-directory-wkd"),
          target="_blank"
        )= t("Learn more")
      li.list-inline-item
        a.btn.btn-primary.btn-sm(
          href="/.well-known/openpgpkey/hu/mxqp8ogw4jfq83a58pn1wy1ccc1cx3f5.txt",
          target="_blank"
        )= t("View Example")

//-
//- vacation responder support
//-
if !domain || (domain && !domain.is_global)
  //- is_enabled
  .form-group.form-check
    input#input-vacation-responder-is-enabled.form-check-input(
      type="checkbox",
      name="vacation_responder_is_enabled",
      value="true",
      checked=alias && alias.vacation_responder && alias.vacation_responder.is_enabled
    )
    label.form-check-label(for="input-vacation-responder-is-enabled")
      = t("Vacation Responder Enabled")
  //- start_at and end_at
  .form-row
    .col.form-group.floating-label
      input#input-start-date.form-control(
        type="date",
        value=alias && alias.vacation_responder && _.isDate(alias.vacation_responder.start_date) ? dayjs(alias.vacation_responder.start_date).format("YYYY-MM-DD") : "",
        name="vacation_responder_start_date",
        placeholder=" "
      )
      label(for="input-start-date")= t("Vacation Responder Start Date")
    .col.form-group.floating-label
      input#input-end-date.form-control(
        type="date",
        value=alias && alias.vacation_responder && _.isDate(alias.vacation_responder.end_date) ? dayjs(alias.vacation_responder.end_date).format("YYYY-MM-DD") : "",
        name="vacation_responder_end_date",
        placeholder=" "
      )
      label(for="input-vacation-responder-end-date")= t("Vacation Responder End Date")
  //- subject
  .form-group
    label(for="input-vacation-responder-subject")= t("Vacation Responder Subject")
    input#input-vacation-responder-subject.form-control(
      value=alias && alias.vacation_responder && isSANB(alias.vacation_responder.subject) ? alias.vacation_responder.subject : "",
      name="vacation_responder_subject",
      placeholder="",
      type="text"
    )
  //- message
  .form-group
    label(for="textarea-vacation-responder-message")= t("Vacation Responder Message")
    textarea#textarea-vacation-responder-message.form-control(
      name="vacation_responder_message",
      rows=3
    )= alias && alias.vacation_responder && isSANB(alias.vacation_responder.message) ? alias.vacation_responder.message : ""
