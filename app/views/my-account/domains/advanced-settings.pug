extends ../../layout

mixin deleteDomain
  if domain.group === 'admin'
    #delete-domain.card.border-themed.mb-3
      h2.h6.card-header= t("Delete Domain")
      .card-body
        .alert.alert-danger.small.mb-0= t("Deleting your domain is irreversible.  Please take extreme caution when deleting your domain.")
      .card-footer.text-right
        form.ajax-form.confirm-prompt(
          action=l(`/my-account/domains/${punycode.toASCII(domain.name)}`),
          method="POST"
        )
          input(type="hidden", name="_method", value="DELETE")
          button.btn.btn-sm.btn-danger(type="submit")
            i.fa.fa-trash
            = " "
            = t("Delete Domain")

block append scripts
  //- prettier-ignore
  script(nonce=nonce).
    window.IS_CUSTOM_VERIFICATION_DISABLED = !{domain.plan === 'free' || !domain.has_custom_verification};
  |
  script(
    defer,
    src=manifest("js/advanced-settings.js"),
    integrity=manifest("js/advanced-settings.js", "integrity"),
    crossorigin="anonymous"
  )

block append stylesheets
  link(
    rel="stylesheet",
    href=manifest("css/codemirror.css"),
    integrity=manifest("css/codemirror.css", "integrity"),
    crossorigin="anonymous"
  )

mixin planRequired(isTeam = false)
  if domain.plan === 'free' || (isTeam && domain.plan !== 'team')
    .alert.alert-warning.text-center!= t('Please <a class="alert-link" href="%s">upgrade to the <span class="notranslate">%s</span> plan</a> to unlock this feature.', l(`/my-account/domains/${punycode.toASCII(domain.name)}/billing?plan=${isTeam ? "team" : "enhanced_protection"}`), isTeam ? "Team" : "Enhanced Protection")

block body
  - const isDisabled = domain.plan === "free";
  - const isTeamDisabled = domain.plan !== "team";

  //- Generate Password
  if domain.group === 'admin' && !domain.is_global
    #modal-generate-password.modal.fade(
      tabindex="-1",
      role="dialog",
      aria-labelledby="modal-generate-password-title",
      aria-hidden="true"
    )
      .modal-dialog(role="document")
        .modal-content
          .modal-header.text-center.d-block
            h4#modal-generate-password-title.d-inline-block.ml-4= t("Generate Catch-All Password")
            button.close(
              type="button",
              data-dismiss="modal",
              aria-label="Close"
            )
              span(aria-hidden="true") &times;
          .modal-body
            .text-center
              form.ajax-form.confirm-prompt(
                action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/catch-all-passwords`),
                method="POST"
              )
                p.font-weight-bold.lead= t("Enter a strong new password:")
                .form-group.floating-label
                  input#input-new-password.form-control.form-control-lg(
                    name="new_password",
                    type="password",
                    placeholder=" ",
                    autocomplete=config.env === "test" ? "off" : randomstring()
                  )
                  label(for="input-new-password")= t("New Password")
                p.alert.alert-primary.small
                  = emoji("point_up")
                  = " "
                  = t("Leave blank to use our strong and random 24-character password generator.")
                .form-group
                  label(for="textarea-token-description")
                    = t("Description")
                    = " "
                    span.text-muted= t("(optional; for organization purposes only)")
                  textarea#textarea-token-description.form-control(
                    name="description",
                    maxlength=150,
                    rows=2
                  )
                  p.form-text.small.text-black.text-themed-50= t("Description has a max of 150 characters.")
                button.btn.btn-lg.btn-block.btn-success(type="submit")
                  i.fa.fa-key
                  = " "
                  = t("Generate Password")

  //- Manage Passwords
  if domain.group === 'admin' && !domain.is_global
    #modal-manage-passwords.modal.fade(
      tabindex="-1",
      role="dialog",
      aria-labelledby="modal-manage-passwords-title",
      aria-hidden="true"
    )
      .modal-dialog.modal-lg(role="document")
        .modal-content
          .modal-header.text-center.d-block
            h4#modal-manage-passwords-title.d-inline-block.ml-4= t("Manage Catch-all Passwords")
            button.close(
              type="button",
              data-dismiss="modal",
              aria-label="Close"
            )
              span(aria-hidden="true") &times;
          .modal-body
            .text-center
              table.table.table-hover.table-bordered.table-sm.mb-0
                thead.thead-dark
                  tr
                    if domain.plan === 'team'
                      th(scope="col")= t("Author")
                    if !Array.isArray(domain.tokens) || domain.tokens.length === 0 || domain.tokens.some(t => Boolean(t.description))
                      th(scope="col")= t("Description")
                    th(scope="col")= t("Created")
                    th(scope="col")= t("Actions")
                tbody
                  if !Array.isArray(domain.tokens) || domain.tokens.length === 0
                    tr
                      - let colspan = !Array.isArray(domain.tokens) || domain.tokens.length === 0 || domain.tokens.some((t) => Boolean(t.description)) ? 4 : 3;
                      if domain.plan !== 'team'
                        - colspan = colspan - 1;
                      td(colspan=colspan)
                        .alert.alert-info.text-center.mb-0= t("No catch-all passwords exist yet.")
                  else
                    each token in domain.tokens
                      tr
                        if domain.plan === 'team'
                          td.align-middle.small.text-monospace
                            if token.user && token.user.email
                              = token.user.email
                            else
                              i.text-muted= t("Not Available")
                        if !Array.isArray(domain.tokens) || domain.tokens.length === 0 || domain.tokens.some(t => Boolean(t.description))
                          td.align-middle.small.text-monospace
                            if token.description
                              = token.description
                            else
                              i.text-muted= t("None")
                        td.align-middle.text-center.dayjs(
                          data-time=new Date(token.created_at).getTime()
                        )
                          = dayjs(token.created_at).tz(user.timezone === 'Etc/Unknown' ? 'UTC' : user.timezone).format("M/D/YY h:mm A z")
                        td.align-middle
                          form.ajax-form.confirm-prompt.d-inline-block(
                            action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/catch-all-passwords/${token.id}`),
                            method="POST"
                          )
                            input(
                              type="hidden",
                              name="_method",
                              value="DELETE"
                            )
                            button.btn.btn-danger(type="submit")
                              i.fa.fa-trash
                              = " "
                              = t("Delete Password")

  //- Invite Modal
  if domain.group === 'admin'
    #modal-invite.modal.fade(
      tabindex="-1",
      role="dialog",
      aria-labelledby="modal-invite-title",
      aria-hidden="true"
    )
      .modal-dialog(role="document")
        .modal-content
          .modal-header.text-center.d-block
            h4#modal-invite-title.d-inline-block.ml-4= t("Invite new team member")
            button.close(
              type="button",
              data-dismiss="modal",
              aria-label="Close"
            )
              span(aria-hidden="true") &times;
          .modal-body
            .text-center
              +planRequired(true)
            form.ajax-form.confirm-prompt(
              action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/invites`),
              method="POST",
              disabled=isTeamDisabled
            )
              .form-group
                label(for="input-invite-email")= t("Email address")
                input#input-invite-email.form-control(
                  required,
                  disabled=isTeamDisabled,
                  autocomplete=config.env === "test" ? "off" : randomstring(),
                  name="email",
                  type="email",
                  placeholder="name@example.com"
                )
              label= t("Group")
              .form-group
                .form-check.form-check-inline
                  input#input-invite-group-user.form-check-input(
                    type="radio",
                    disabled=isTeamDisabled,
                    name="group",
                    value="user",
                    checked
                  )
                  label.form-check-label(for="input-invite-group-user")= t("User")
                .form-check.form-check-inline
                  input#input-invite-group-admin.form-check-input(
                    type="radio",
                    disabled=isTeamDisabled,
                    name="group",
                    value="admin"
                  )
                  label.form-check-label(for="input-invite-group-admin")= t("Admin")
              button.btn.btn-block.btn-success.btn-lg(
                type="submit",
                disabled=isTeamDisabled
              )= t("Send invitation")
    #modal-copy-invite.modal.fade(
      tabindex="-1",
      role="dialog",
      aria-labelledby="modal-copy-invite-title",
      aria-hidden="true"
    )
      .modal-dialog.modal-lg(role="document")
        .modal-content
          .modal-header.text-center.d-block
            h4#modal-copy-invite-title.d-inline-block.ml-4= t("Share invitation link")
            button.close(
              type="button",
              data-dismiss="modal",
              aria-label="Close"
            )
              span(aria-hidden="true") &times;
          .modal-body
            .text-center
              +planRequired(true)
            .input-group.input-group-lg
              input#invite-link.form-control(
                type="text",
                readonly,
                value=isTeamDisabled ? false : `${config.urls.web}/my-account/domains/${domain.id}/invites`
              )
              .input-group-append
                button.btn.btn-primary(
                  type="button",
                  data-toggle="clipboard",
                  data-clipboard-target="#invite-link",
                  disabled=isTeamDisabled
                )
                  i.fa.fa-clipboard
                  = " "
                  = t("Copy Invite Link")
  .min-vh-80.d-flex.flex-column
    .container.py-3
      .row
        .col
          include ../../_breadcrumbs
      if !dayjs().isBefore(dayjs(domain.created_at).add(30, 'days'))
        .row
          .col
            .alert.alert-secondary.small.text-center
              strong= t("Need to remove this domain?")
              = " "
              a.alert-link.text-muted(href="#delete-domain")
                = t("Click here to go Delete Domain")
      //- Catch-all Passwords
      if domain.group === 'admin' && !domain.is_global
        #catch-all-passwords.row
          .col
            .card.border-themed.mb-3
              h2.h6.card-header= t("Catch-all Passwords")
              .card-body
                != t('You can easily use catch-all passwords to send email with <i class="font-weight-bold">any</i> alias at your domain.')
                br
                != t('If you authenticate with our SMTP server, then your username is <code class="notranslate">*@%s</code>.', domain.name)
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.btn.btn-sm.btn-dark(
                      type="button",
                      data-toggle="modal",
                      data-target="#modal-manage-passwords"
                    )
                      i.fa.fa-list
                      = " "
                      = t("Manage Passwords")
                  li.list-inline-item
                    button.btn.btn-sm.btn-success(
                      type="button",
                      data-toggle="modal",
                      data-target="#modal-generate-password"
                    )
                      i.fa.fa-key
                      = " "
                      = t("Generate Password")

      //- Outbound SMTP
      if domain.group === 'admin'
        .row
          .col
            .card.border-themed.mb-3
              h2.h6.card-header= t("Outbound SMTP Configuration")
              .card-body
                +planRequired(false)
                if domain.plan !== 'free'
                  if _.isDate(domain.smtp_suspended_sent_at)
                    .alert.alert-danger.text-center!= t('Domain is suspended from outbound SMTP service, please <a class="alert-link" href="%s">contact us</a> to resolve.', l("/help"))
                  else
                    if domain.has_dkim_record && domain.has_return_path_record && domain.has_dmarc_record
                      .alert.alert-success
                        = emoji("tada")
                        = " "
                        != t("Congratulations &ndash; you completed setup!")
                    else
                      .alert.alert-danger!= t('You must <a href="%s" class="alert-link">complete setup</a> to send emails via SMTP and API.', l(`/my-account/domains/${punycode.toASCII(domain.name)}/verify-smtp`))
              //- Render setup instructions relative to the provider
              if !_.isDate(domain.smtp_suspended_sent_at) && domain.plan !== 'free'
                .card-footer.text-right
                  ul.list-inline.mb-0
                    li.list-inline-item.mb-3.mb-md-0: a.btn.btn-sm.btn-success(
                      href=l(`/my-account/domains/${punycode.toASCII(domain.name)}/aliases`)
                    )= t("Generate alias passwords")
                    li.list-inline-item.mb-3.mb-md-0: a.btn.btn-sm.btn-dark(
                      href=l("/faq#do-you-support-sending-email-with-smtp"),
                      target="_blank"
                    )= t("Send via SMTP")
                    li.list-inline-item.mb-3.mb-md-0: a.btn.btn-sm.btn-dark(
                      href=l("/email-api#tag/emails/POST/v1/emails"),
                      target="_blank"
                    )= t("Send via API")
                    li.list-inline-item
                      a.btn.btn-sm(
                        href=l(`/my-account/domains/${punycode.toASCII(domain.name)}/verify-smtp`),
                        class=domain.has_dkim_record && domain.has_return_path_record && domain.has_dmarc_record ? "btn-secondary" : "btn-danger"
                      )
                        if domain.has_dkim_record && domain.has_return_path_record && domain.has_dmarc_record
                          = t("Verify Setup")
                        else
                          = t("Complete Setup")
      .row
        .col
          //-
          //- if the domain was created within past 30d
          //- then render the delete domain at the top of page
          //- otherwise it gets rendered at the bottom
          //-
          if dayjs().isBefore(dayjs(domain.created_at).add(30, 'days'))
            +deleteDomain
          if domain.group === 'admin'
            .card.border-themed.mb-3
              h2.h6.card-header= t("Current Plan")
              .card-body
                .alert.alert-success.small.mb-0!= t('This domain is currently on the <span class="notranslate">%s</span> plan. Visit your <a class="alert-link" href="%s">Billing</a> page and our <a class="alert-link" href="%s">Pricing</a> page to learn more and compare plans.', t(titleize(humanize(domain.plan))), l("/my-account/billing"), l(`/private-business-email?domain=${domain.name}`))
              .card-footer.text-right
                .btn-group
                  button.btn.btn-lg.btn-primary.dropdown-toggle(
                    type="button",
                    data-toggle="dropdown",
                    data-boundary="window",
                    aria-haspopup="true",
                    aria-expanded="false"
                  )= t("Change plan")
                  .dropdown-menu.dropdown-menu-right
                    h6.dropdown-header= t("Change plan to:")
                    each plan in [ 'free', 'enhanced_protection', 'team' ].filter(plan => plan !== domain.plan)
                      a.dropdown-item(
                        href=l(`/my-account/domains/${punycode.toASCII(domain.name)}/billing?plan=${plan}`)
                      )
                        case plan
                          when 'enhanced_protection'
                            i.fa.fa-fw.fa-shield
                            = " "
                            = t("Enhanced Protection")
                          when 'team'
                            i.fa.fa-fw.fa-users
                            = " "
                            = t("Team")
                          default
                            = t("Free")
                            = " ("
                            = t("DNS-based")
                            = ")"
                    .dropdown-divider
                    a.dropdown-item.small.text-muted(
                      href=l(`/private-business-email?domain=${domain.name}`)
                    )= t("See all plan features")

          //- Max Quota Per Alias
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              input(
                type="hidden",
                name="_section",
                value="max_quota_per_alias"
              )
              h2.h6.card-header= t("Storage Max Quota Per Alias")
              .card-body
                +planRequired(false)
                .form-group.mb-0
                  input#input-max-quota-per-alias.form-control(
                    type="text",
                    disabled=isDisabled,
                    name="max_quota_per_alias",
                    value=Number.isFinite(domain.max_quota_per_alias) ? bytes(domain.max_quota_per_alias) : ""
                  )
                  p.form-text.small.text-black.text-themed-50.mb-0
                    != t('Domain admins can update the maximum storage quota across all aliases. Enter a human-friendly string such as "1GB" &ndash; note that we use <a href="https://github.com/visionmedia/bytes.js" class="notranslate alert-link" target="_blank" rel="noopener noreferrer">bytes</a> to parse the value to a Number.  Domain admins can set maximum storage quota limits on a per alias basis by editing the alias directly.')
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.confirm-prompt.btn.btn-lg.btn-secondary(
                      type="reset",
                      disabled=isDisabled
                    )= t("Reset")
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(
                      type="submit",
                      disabled=isDisabled
                    )= t("Save")

          //- Ignore MX Check
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              input(type="hidden", name="_section", value="ignore_mx_check")
              h2.h6.card-header= t("Ignore MX Check for Verification")
              .card-body
                +planRequired(false)
                .form-group.form-check.mb-0
                  input#input-ignore-mx-check.form-check-input(
                    type="checkbox",
                    disabled=isDisabled,
                    name="ignore_mx_check",
                    value="true",
                    checked=domain.ignore_mx_check
                  )
                  label.form-check-label(for="input-ignore-mx-check")= t("Ignore MX record check for verification (useful for advanced MX exchange configuration)")
                  p.form-text.small.text-black.text-themed-50.mb-0= t("If you check this, then we will assume you are keeping your existing MX exchange and have advanced forwarding rules that forward mail to our server.")
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.confirm-prompt.btn.btn-lg.btn-secondary(
                      type="reset",
                      disabled=isDisabled
                    )= t("Reset")
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(
                      type="submit",
                      disabled=isDisabled
                    )= t("Save")

          //- Outbound SMTP Retention
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              h2.h6.card-header= t("Outbound SMTP Retention Period")
              .card-body
                +planRequired(false)
                p.card-text
                  != t("Once an outbound SMTP email is successfully delivered or permanently errors, then we will redact and purge the message body after the number of days of retention configured below.")
                .form-group
                  input#input-retention-days.form-control(
                    type="number",
                    min=0,
                    max=30,
                    name="retention_days",
                    value=domain && typeof domain.retention_days === "number" ? domain.retention_days : 0
                  )
                  p.form-text.small.text-black.text-themed-50!= t("Enter a number between 0-30 that corresponds to the number of days for retention. Zero indicates that the message will be removed immediately.")
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(type="submit")= t("Save")

          //- Bounce Webhook
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              input(type="hidden", name="_section", value="bounce_webhook")
              .card.border-themed
                h2.h6.card-header= t("Bounce Webhook URL")
                .card-body
                  +planRequired(false)
                  p.card-text!= t("We can automatically send a POST request to the bounce webhook URL of your choice with detailed information (e.g. to manage your subscribers for newsletters &ndash; or so you can monitor your outbound email programmatically).")
                  p.card-text
                    strong!= t('Need to verify that <a href="%s" target="_blank">webhooks</a> are sent by us?', l("/faq#do-you-support-webhooks"))
                    = " "
                    != t('You can check that the remote server\'s IP address is one of ours listed under our public <a href="%s" target="_blank">IP Addresses</a> page.', l("/ips"))
                    = " "
                    != t('Use the webhook key below listed under "Webhook Signature Payload Verification Key" to compare the <code>X-Webhook-Signature</code> header with the computed payload body.')
                    = " "
                    != t('Please reference <a href="%s" target="_blank" rel="noopener noreferrer">this Stack Overflow post</a> for an example.', "https://stackoverflow.com/a/68885281")
                  form.ajax-form.confirm-prompt.d-inline-block
                  .form-group.floating-label
                    input#bounce-webhook-url.form-control.form-control-lg(
                      type="url",
                      name="bounce_webhook",
                      disabled=isDisabled,
                      autocomplete=config.env === "test" ? "off" : randomstring(),
                      placeholder=t("Bounce webhook URL"),
                      autocorrect="off",
                      spellcheck="false",
                      autocapitalize="off",
                      value=domain.bounce_webhook || ""
                    )
                    label(for="#bounce-webhook-url")= t("Bounce Webhook URL")
                  .small.form-text.text-muted!= t("Must be a valid URL starting with <code>http://</code> or <code>https://</code>")
                .card-footer.text-right
                  ul.list-inline.mb-0
                    li.list-inline-item
                      button.confirm-prompt.btn.btn-lg.btn-secondary(
                        type="reset",
                        disabled=isDisabled
                      )= t("Reset")
                    li.list-inline-item
                      button.btn.btn-lg.btn-primary(
                        type="submit",
                        disabled=isDisabled
                      )= t("Save")

          //- Webhook Key
          if domain.group === 'admin'
            .card.border-themed.mb-3
              h2.h6.card-header= t("Webhook Signature Payload Verification Key")
              .card-body
                +planRequired(false)
                p.card-text
                  strong!= t('Need to verify that <a href="%s" target="_blank">webhooks</a> are sent by us?', l("/faq#do-you-support-webhooks"))
                  = " "
                  != t('You can check that the remote server\'s IP address is one of ours listed under our public <a href="%s" target="_blank">IP Addresses</a> page.', l("/ips"))
                  = " "
                  != t("Additionally, you can also use this webhook key to compare the <code>X-Webhook-Signature</code> header with the computed payload body.")
                  = " "
                  != t('Please reference <a href="%s" target="_blank" rel="noopener noreferrer">this Stack Overflow post</a> for an example.', "https://stackoverflow.com/a/68885281")
                .input-group
                  input#webhook-key.form-control(
                    type="text",
                    readonly,
                    value=domain.webhook_key ? decrypt(domain.webhook_key) : ""
                  )
                  .input-group-append
                    button.btn.btn-primary(
                      type="button",
                      data-toggle="clipboard",
                      data-clipboard-target="#webhook-key"
                    )
                      i.fa.fa-clipboard
                      = " "
                      = t("Copy")
                .small.form-text.text-muted= t("Keep your webhook key secure and never share it publicly")
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    form.ajax-form.confirm-prompt(
                      action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/advanced-settings/reset-domain-webhook-key`),
                      method="POST"
                    )
                      input(type="hidden", name="_method", value="DELETE")
                      button.btn.btn-danger(type="submit")= t("Reset Key")
                  li.list-inline-item
                    a.btn.btn-dark(href=l("/faq#do-you-support-webhooks"))= t("Learn more")

          //- Restricted Alias Names
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/restricted-alias-names`),
              method="POST",
              disabled=isTeamDisabled
            )
              h2.h6.card-header= t("Restricted Alias Names")
              .card-body
                +planRequired(true)
                .alert.alert-danger.small!= t("<strong>Caution:</strong> If any values are entered below, then in addition to <a href='https://github.com/forwardemail/reserved-email-addresses-list/blob/master/admin-list.json' target='_blank', rel='noopener noreferrer' class='alert-link'>admin-only usernames</a>, we will not allow non-admin users in your team to create aliases have exact matches with this list.")
                .alert.alert-info.small= t("Enter alias names below. You can use line breaks, commas, and/or spaces as delimiters.")
                label(for="#textarea-restricted-alias-names")= t("Restricted Alias Names")
                textarea#textarea-restricted-alias-names.form-control(
                  name="restricted_alias_names",
                  rows=5
                )= Array.isArray(domain.restricted_alias_names) ? domain.restricted_alias_names.join("\n") : ""
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(
                      type="submit",
                      disabled=isTeamDisabled
                    )= t("Save")

          //- Allowlisted Senders
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/allowlist`),
              method="POST"
            )
              h2.h6.card-header= t("Allowlisted Senders")
              .card-body
                .alert.alert-danger.small!= t("<strong>Caution:</strong> If any values are entered below, then we will only allow these specific senders to send email to your domain <code class='alert-link notranslate'>%s</code> (all others will be rejected).", domain.name)
                .alert.alert-info.small= t("Enter IP addresses, domain names, and/or email addresses below.  You can use line breaks, commas, and/or spaces as delimiters.")
                label(for="#textarea-allowlist")= t("Allowlist")
                textarea#textarea-allowlist.form-control(
                  name="allowlist",
                  rows=5
                )= Array.isArray(domain.allowlist) ? domain.allowlist.join("\n") : ""
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(type="submit")= t("Save")

          //- Denylisted Senders
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/denylist`),
              method="POST"
            )
              h2.h6.card-header= t("Denylisted Senders")
              .card-body
                .alert.alert-info.small= t("Enter IP addresses, domain names, and/or email addresses below.  You can use line breaks, commas, and/or spaces as delimiters.")
                label(for="#textarea-denylist")= t("Denylist")
                textarea#textarea-denylist.form-control(
                  name="denylist",
                  rows=5
                )= Array.isArray(domain.denylist) ? domain.denylist.join("\n") : ""
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(type="submit")= t("Save")

          if domain.group === 'admin'
            - const hasInvites = Array.isArray(domain.invites) && domain.invites.length > 0 && domain.plan === "team";
            .card.border-themed.mb-3
              h2.h6.card-header= t("Manage Team")
              .card-body
                +planRequired(true)
                .alert.alert-info.small= t("Members have shared access to this domain, and you can invite new members, remove existing members, or manage permissions for them below.")
                .table-responsive
                  table.table.table-hover.table-bordered(
                    class=hasInvites ? false : "mb-0"
                  )
                    thead.thead-dark
                      tr
                        th(scope="col")= t("Team Member")
                        th.text-center(scope="col")= t("Alias Count")
                        if domain.members.length > 1
                          th.text-center.text-md-left(scope="col")= t("Quick Links")
                    tbody
                      each member in domain.members
                        //- member.user (Object) and member.group (String)
                        //- member.user.id (String)
                        //- member.user.email (String)
                        if member && member.user && member.user.email && member.user.id
                          tr
                            td.align-middle= member.user.email
                            td.align-middle.text-center
                              .h3.mb-0: span.badge.badge-pill.badge-dark.text-monospace.font-weight-normal= member.alias_count
                            if domain.members.length > 1
                              td.align-middle
                                ul.list-inline.mb-0
                                  li.list-inline-item
                                    form.ajax-form.confirm-prompt.d-inline-block(
                                      action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/members/${member.user.id}`),
                                      method="POST",
                                      disabled=isTeamDisabled
                                    )
                                      input(
                                        type="hidden",
                                        name="_method",
                                        value="PUT"
                                      )
                                      input(
                                        type="hidden",
                                        name="group",
                                        value=member.group === "admin" ? "user" : "admin"
                                      )
                                      button.btn.btn-dark(
                                        type="submit",
                                        disabled=isTeamDisabled
                                      )= member.group === "admin" ? t("Make User") : t("Make Admin")
                                  //- if member.user.id !== user.id
                                  li.list-inline-item
                                    form.ajax-form.confirm-prompt.d-inline-block(
                                      action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/members/${member.user.id}`),
                                      method="POST",
                                      disabled=isTeamDisabled
                                    )
                                      input(
                                        type="hidden",
                                        name="_method",
                                        value="DELETE"
                                      )
                                      button.btn.btn-danger(
                                        type="submit",
                                        disabled=isTeamDisabled
                                      )
                                        i.fa.fa-trash
                                        = " "
                                        = t("Delete Member")
                if hasInvites
                  .alert.alert-warning.small= t("Pending invitations are listed below.")
                  .table-responsive
                    table.table.table-hover.table-bordered.mb-0
                      thead.thead-dark
                        tr
                          th(scope="col")= t("Email Address")
                          th(scope="col")= t("Group")
                          th(scope="col")= t("Quick Links")
                        tbody
                          each invite in domain.invites
                            tr
                              td.align-middle= invite.email
                              td.align-middle= titleize(invite.group)
                              td.align-middle
                                ul.list-inline.mb-0
                                  //- copy invite link
                                  li.list-inline-item
                                    button.btn.btn-primary(
                                      type="button",
                                      data-toggle="modal",
                                      data-target="#modal-copy-invite",
                                      disabled=isTeamDisabled
                                    )
                                      i.fa.fa-clipboard
                                      = " "
                                      = t("Copy Invite Link")
                                  //- delete invite
                                  li.list-inline-item
                                    form.ajax-form.confirm-prompt.d-inline-block(
                                      action=l(`/my-account/domains/${punycode.toASCII(domain.name)}/invites`),
                                      method="POST",
                                      disabled=isTeamDisabled
                                    )
                                      input(
                                        type="hidden",
                                        name="_method",
                                        value="DELETE"
                                      )
                                      input(
                                        type="hidden",
                                        name="email",
                                        value=invite.email
                                      )
                                      button.btn.btn-danger(
                                        type="submit",
                                        disabled=isTeamDisabled
                                      )
                                        i.fa.fa-trash
                                        = " "
                                        = t("Delete Invite")

              .card-footer.text-right
                //- TODO: this should be a right-clickable link with re-usable form in the modal (and modal-anchor)
                button.btn.btn-lg.btn-primary(
                  type="button",
                  data-target="#modal-invite",
                  data-toggle="modal"
                )
                  i.fa.fa-user-plus
                  = " "
                  = t("Invite New Member")

          //- Spam Scanner Settings
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              input(
                type="hidden",
                name="_section",
                value="spam_scanner_settings"
              )
              h2.h6.card-header= t("Spam Scanner Settings")
              .card-body
                +planRequired(false)
                p.card-text
                  != t('<a class="notranslate" target="_blank" rel="noopener noreferrer" href="%s">Spam Scanner</a> is the open-source technology we built <i>ourselves</i> for anti-spam, phishing, and virus protection.', "https://spamscanner.net")
                  = " "
                  != t("Since it was created by the same team that brought you Forward Email, it also abides by the same privacy-first and zero-logging policies.")
                  = " "
                  != t('You can learn more at <a target="_blank" rel="noopener noreferrer" href="%s" class="notranslate">%s</a>.', "https://spamscanner.net", "https://spamscanner.net")
                .form-group.form-check
                  input#input-has-adult-protection.form-check-input(
                    type="checkbox",
                    disabled=isDisabled,
                    name="has_adult_content_protection",
                    value="true",
                    checked=domain.has_adult_content_protection
                  )
                  label.form-check-label(for="input-has-adult-protection")= t("Adult-related content protection")
                  p.form-text.small.text-black.text-themed-50!= t("If you uncheck this, then links will <u>not be scanned</u> for adult-related content.")
                .form-group.form-check
                  input#input-has-phishing-protection.form-check-input(
                    type="checkbox",
                    disabled=isDisabled,
                    name="has_phishing_protection",
                    value="true",
                    checked=domain.has_phishing_protection
                  )
                  label.form-check-label(for="input-has-phishing-protection")= t("Phishing protection")
                  p.form-text.small.text-black.text-themed-50!= t('If you uncheck this, then links will <u>not be scanned</u> for malware, domain swapping, <a target="_blank" rel="noopener noreferrer" href="%s">IDN homograph attacks</a>, nor phishing in general.', "https://wikipedia.org/wiki/IDN_homograph_attack")
                .form-group.form-check
                  input#input-has-executable-protection.form-check-input(
                    type="checkbox",
                    disabled=isDisabled,
                    name="has_executable_protection",
                    value="true",
                    checked=domain.has_executable_protection
                  )
                  label.form-check-label(for="input-has-executable-protection")= t("Executable protection")
                  p.form-text.small.text-black.text-themed-50!= t('If you uncheck this, then links and attachments will <u>not be scanned</u> for potentially-malicious <a target="_blank" rel="noopener noreferrer" href="%s">executable</a> file types, extensions, names, headers, <a target="_blank" rel="noopener noreferrer" href="%s">IDN homograph attacks</a>, nor <a target="_blank" rel="noopener noreferrer" href="%s">magic numbers</a>.', "https://github.com/spamscanner/spamscanner/blob/master/executables.json", "https://wikipedia.org/wiki/IDN_homograph_attack", "https://wikipedia.org/wiki/Magic_number_(programming)#Magic_numbers_in_files")
                .form-group.form-check.mb-0
                  input#input-has-virus-protection.form-check-input(
                    type="checkbox",
                    disabled=isDisabled,
                    name="has_virus_protection",
                    value="true",
                    checked=domain.has_virus_protection
                  )
                  label.form-check-label(for="input-has-virus-protection")= t("Virus protection")
                  p.form-text.small.text-black.text-themed-50!= t('If you uncheck this, then attachments will <u>not be scanned</u> for trojans, viruses, malware, nor other malicious threats with <a target="_blank" rel="noopener noreferrer" href="%s" class="notranslate">ClamAV</a>.', "https://www.clamav.net/")
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.confirm-prompt.btn.btn-lg.btn-secondary(
                      type="reset",
                      disabled=isDisabled
                    )= t("Reset")
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(
                      type="submit",
                      disabled=isDisabled
                    )= t("Save")
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              h2.h6.card-header= t("Custom SMTP Port Forwarding")
              .card-body
                +planRequired(false)
                .form-group.floating-label
                  input#input-port.form-control.form-control-lg(
                    type="port",
                    disabled=isDisabled,
                    required,
                    name="smtp_port",
                    value=domain.smtp_port,
                    placeholder=" ",
                    aria-describedby="help-port"
                  )
                  label(for="input-port")= t("Port number (SMTP)")
                #help-port.alert.alert-secondary.small.mb-0
                  = t("Do not modify this unless you know what you are doing.  This will forward all emails to the specific port for all aliases and their recipients.  For example, if you are forwarding to info@example.com, and input port number 1337 here, then our server will forward email to example.com on port 1337 (as opposed to the standard SMTP port of 25).")
                  if domain.plan === 'free'
                    = " "
                    != t('If you are on the free plan, then you can use the <a href="%s">"forward-email-port"</a> DNS <span class="notranslate">TXT</span> record.', l("/faq#can-i-forward-emails-to-ports-other-than-25-eg-if-my-isp-has-blocked-port-25"))
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.confirm-prompt.btn.btn-lg.btn-secondary(
                      type="reset",
                      disabled=isDisabled
                    )= t("Reset")
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(
                      type="submit",
                      disabled=isDisabled
                    )= t("Save")
          .card.border-themed.mb-3
            h2.h6.card-header= t("Maximum Recipients Per Alias")
            .card-body
              if domain.group === 'admin'
                +planRequired(false)
              .card-text
                != t('You are currently limited to forwarding to <strong class="notranslate">%d</strong> recipients per alias.', domain.max_recipients_per_alias <= 0 ? config.maxForwardedAddresses : domain.max_recipients_per_alias)
                = " "
                != t('If you need to increase this limit, then please contact <span class="notranslate">%s</span> and include a valid reason.', domain.group === "admin" ? t("us") : t("your domain's administrator"))
            if domain.group === 'admin'
              .card-footer.text-right
                a.btn.btn-lg.btn-primary(
                  href=l("/help"),
                  role="button",
                  data-target="#modal-help",
                  disabled=isDisabled
                )= t("Increase limit")

          //- Has Recipient Verification
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              input(
                type="hidden",
                name="_section",
                value="recipient_verification"
              )
              h2.h6.card-header= t("Recipient Verification")
              .card-body
                +planRequired(false)
                .form-group.form-check.mb-0
                  input#input-has-recipient-verification.form-check-input(
                    type="checkbox",
                    disabled=isDisabled,
                    name="has_recipient_verification",
                    value="true",
                    checked=domain.has_recipient_verification
                  )
                  label.form-check-label(
                    for="input-has-recipient-verification"
                  )= t("Requires recipients to click email verification link")
                  p.form-text.small.text-black.text-themed-50.mb-0= t("If you check this, then each email recipient will be required to click an email verification link in order for emails to flow through.")
              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.confirm-prompt.btn.btn-lg.btn-secondary(
                      type="reset",
                      disabled=isDisabled
                    )= t("Reset")
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(
                      type="submit",
                      disabled=isDisabled
                    )= t("Save")

          //- Custom Verification Template
          - const isCustomVerificationDisabled = domain.plan === "free" || !domain.has_custom_verification;
          if domain.group === 'admin'
            form.ajax-form.confirm-prompt.card.border-themed.mb-3(
              action=ctx.path,
              method="POST",
              disabled=isCustomVerificationDisabled
            )
              input(type="hidden", name="_method", value="PUT")
              input(
                type="hidden",
                name="_section",
                value="custom_verification_template"
              )
              h2.h6.card-header= t("Custom Verification Template")
              .card-body
                +planRequired(false)
                if !domain.has_custom_verification && domain.plan !== 'free'
                  .alert.alert-warning.text-center!= t('Please <a class="alert-link" href="%s">contact us</a> to unlock this feature.', l("/help"))
                //- custom_verification.name
                .form-group.floating-label
                  input#input-custom-verification-name.form-control.form-control-lg(
                    value=domain.custom_verification && isSANB(domain.custom_verification.name) ? domain.custom_verification.name : "",
                    name="custom_verification_name",
                    autocomplete=config.env === "test" ? "off" : randomstring(),
                    placeholder="Sender name",
                    autocorrect="off",
                    spellcheck="false",
                    autocapitalize="off",
                    disabled=isCustomVerificationDisabled,
                    type="text"
                  )
                  label(for="input-custom-verification-name")= t("Sender name")

                //- custom_verification.email
                .form-group.floating-label
                  input#input-custom-verification-email.form-control.form-control-lg(
                    value=domain.custom_verification && isSANB(domain.custom_verification.email) ? domain.custom_verification.email : "",
                    name="custom_verification_email",
                    autocomplete="email",
                    placeholder="Sender email",
                    autocorrect="off",
                    spellcheck="false",
                    disabled=isCustomVerificationDisabled,
                    type="email"
                  )
                  label(for="input-custom-verification-email")= t("Sender email")

                //- custom_verification.subject
                .form-group.floating-label
                  input#input-custom-verification-subject.form-control.form-control-lg(
                    value=domain.custom_verification && isSANB(domain.custom_verification.subject) ? domain.custom_verification.subject : "",
                    name="custom_verification_subject",
                    autocomplete=config.env === "test" ? "off" : randomstring(),
                    placeholder="Subject line",
                    autocorrect="off",
                    spellcheck="false",
                    autocapitalize="off",
                    disabled=isCustomVerificationDisabled,
                    type="text"
                  )
                  label(for="input-custom-verification-subject")= t("Subject line")

                //- custom_verification.redirect
                .form-group.floating-label
                  input#input-custom-verification-redirect.form-control.form-control-lg(
                    value=domain.custom_verification && isSANB(domain.custom_verification.redirect) ? domain.custom_verification.redirect : "",
                    name="custom_verification_redirect",
                    autocomplete=config.env === "test" ? "off" : randomstring(),
                    placeholder="Verification redirect link",
                    autocorrect="off",
                    spellcheck="false",
                    autocapitalize="off",
                    disabled=isCustomVerificationDisabled,
                    type="url"
                  )
                  label(for="input-custom-verification-redirect")= t("Verification redirect link")
                  p.form-text.small.text-black.text-themed-50= t("If you set a value here, then once a verification link was clicked and it was successful, it will redirect the users to this URL.")

                .form-group
                  label(for="#textarea-custom-verification-html")= t("HTML Content")
                  .alert.alert-warning= t("Please leave this section blank if you wish to use our default HTML template.")
                  .alert.alert-info
                    != t('Please make sure to include the string "VERIFICATION_LINK" without quotes at least once to insert the verification link into the email message.')
                    = " "
                    != t('You can optionally include the string "FROM_EMAIL" and/or "TO_EMAIL" to insert the forwarding "From" address and the forwarding "To" address to give the user context.')
                  textarea#textarea-custom-verification-html(
                    name="custom_verification_html",
                    disabled=isCustomVerificationDisabled
                  )= domain.custom_verification && isSANB(domain.custom_verification.html) ? domain.custom_verification.html : ""

                .form-group
                  label= t("HTML Preview")
                iframe#custom-verification-preview.border.border-themed.mb-3.min-vh-80.w-100(
                  src="about:blank"
                )

                //- TODO: eventually let users customize the text portion (for now we use html-to-text)

              .card-footer.text-right
                ul.list-inline.mb-0
                  li.list-inline-item
                    button.confirm-prompt.btn.btn-lg.btn-secondary(
                      type="reset",
                      disabled=isCustomVerificationDisabled
                    )= t("Reset")
                  li.list-inline-item
                    button.btn.btn-lg.btn-primary(
                      type="submit",
                      disabled=isCustomVerificationDisabled
                    )= t("Save")

      .row
        .col
          //-
          //- if the domain was created within past 30d
          //- then render the delete domain at the top of page
          //- otherwise it gets rendered at the bottom
          //-
          if !dayjs().isBefore(dayjs(domain.created_at).add(30, 'days'))
            +deleteDomain
      .row.text-center.my-5
        .col
          a.btn.btn-outline-secondary(
            href=l(domain.group === "admin" ? `/my-account/domains/${punycode.toASCII(domain.name)}` : "/my-account/domains")
          )
            i.fa.fa-angle-double-left
            = " "
            = domain.group === "admin" ? t("Back to Domain") : t("Back to Domains")
